(()=>{"use strict";var t,e={969:(t,e,i)=>{var n,o=i(437),r=i(264),s=i(385),h=function(){function t(){}return t.loadFont=function(){var t=this;return new Promise((function(e,i){t.font?e():(new r.J).load(t.FONT_DIR,(function(i){t.font=i;var n=t.buildTextMesh("M",0,0,.1,new o.V9B({color:t.COLOR_PALETTE.get("LIGHT")}));if(n.geometry.computeBoundingBox(),!n.geometry.boundingBox)throw new Error("Font bounding box not found");t.baseTextHeight=n.geometry.boundingBox.max.y-n.geometry.boundingBox.min.y,t.baseTextWidth=n.geometry.boundingBox.max.x-n.geometry.boundingBox.min.x,e()}),void 0,i)}))},t.buildQuadrilateralMesh=function(t,e,i,n){void 0===t&&(t=1),void 0===e&&(e=1);var r=new o.bdM(t,e),s=new o.eaF(r,i);return s.position.set(n.x,n.y,0),s},t.buildTextMesh=function(t,e,i,n,r,h,a){if(void 0===h&&(h=!0),void 0===a&&(a=0),!this.font)throw new Error("Font not loaded");var u=new s._(t,{font:this.font,size:n,height:.05}),c=new o.eaF(u,r);return c.position.set(e,i,0),h&&c.geometry.center(),0!==a&&(c.geometry.center().rotateZ(a),c.position.set(e,i,0)),c},t.updateText=function(e,i,n){void 0===n&&(n=!0),e.geometry.dispose(),e.geometry=new s._(i,{font:t.font,size:e.geometry instanceof s._?e.geometry.parameters.options.size:.1,height:.1}),n&&e.geometry.center()},t.updateMaterial=function(t,e){t.material.dispose(),t.material=e},t.drawGrid=function(e){var i=t.COLOR_PALETTE.get("DARKER"),n=new o.fTw(100,1e3,i,i);n.rotateX(Math.PI/2),n.material.depthWrite=!1,n.position.set(0,0,-.2),e.add(n)},t.buildTriangleMesh=function(t,e){var i=Math.sqrt(3)/2*t,n=new o.LoY,r=new Float32Array([-t/2,-i/2,0,t/2,-i/2,0,0,i/2,0]);n.setAttribute("position",new o.THS(r,3));var s=e instanceof o.imn?e:new o.V9B({color:e});return new o.eaF(n,s)},t.buildImageMesh=function(e,i,n){return r=this,s=void 0,a=function(){var r,s,h;return function(t,e){var i,n,o,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=h(0),s.throw=h(1),s.return=h(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function h(h){return function(a){return function(h){if(i)throw new TypeError("Generator is already executing.");for(;s&&(s=0,h[0]&&(r=0)),r;)try{if(i=1,n&&(o=2&h[0]?n.return:h[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,h[1])).done)return o;switch(n=0,o&&(h=[2&h[0],o.value]),h[0]){case 0:case 1:o=h;break;case 4:return r.label++,{value:h[1],done:!1};case 5:r.label++,n=h[1],h=[0];continue;case 7:h=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==h[0]&&2!==h[0])){r=0;continue}if(3===h[0]&&(!o||h[1]>o[0]&&h[1]<o[3])){r.label=h[1];break}if(6===h[0]&&r.label<o[1]){r.label=o[1],o=h;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(h);break}o[2]&&r.ops.pop(),r.trys.pop();continue}h=e.call(t,r)}catch(t){h=[6,t],n=0}finally{i=o=0}if(5&h[0])throw h[1];return{value:h[0]?h[1]:void 0,done:!0}}([h,a])}}}(this,(function(a){switch(a.label){case 0:return r=new o.bdM(i,n),[4,new Promise((function(i,n){t.textureLoader.load(e,i,void 0,n)}))];case 1:return s=a.sent(),h=new o.V9B({map:s,transparent:!0}),[2,new o.eaF(r,h)]}}))},new((h=void 0)||(h=Promise))((function(t,e){function i(t){try{o(a.next(t))}catch(t){e(t)}}function n(t){try{o(a.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof h?o:new h((function(t){t(o)}))).then(i,n)}o((a=a.apply(r,s||[])).next())}));var r,s,h,a},t.addBackgroundMesh=function(e,i,n,r){if(void 0===r&&(r=.05),e.geometry.computeBoundingBox(),!e.geometry.boundingBox)throw new Error("Bounding box not found");var s=t.buildQuadrilateralMesh(e.geometry.boundingBox.getSize(new o.Pq0).x+r,e.geometry.boundingBox.getSize(new o.Pq0).y+.03,n,new o.I9Y(i.x+e.geometry.boundingBox.getSize(new o.Pq0).x/2,i.y+e.geometry.boundingBox.getSize(new o.Pq0).y/2));return s.position.x=i.x+e.geometry.boundingBox.getSize(new o.Pq0).x/2,s.position.y=i.y+e.geometry.boundingBox.getSize(new o.Pq0).y/2,s},t.buildLineMesh=function(t,e,i){var n=new o.LoY,r=new Float32Array([t.x,t.y,0,e.x,e.y,0]);n.setAttribute("position",new o.THS(r,3));var s=new o.mrM({color:i});return new o.N1A(n,s)},t.disposeMeshes=function(){for(var t=this,e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];e.forEach((function(e){return t.disposeMesh(e)}))},t.disposeMesh=function(t){t.geometry&&t.geometry.dispose(),t.material&&(Array.isArray(t.material)?t.material.forEach((function(t){return t.dispose()})):t.material.dispose())},t.toHex=function(t){return"0x".concat(t.toString(16).toUpperCase().padStart(4,"0"))},t.COLOR_PALETTE=new Map([["DARKEST","#0F0D1B"],["DARKER","#1F1B2C"],["DARK","#352F44"],["MEDIUM_DARK","#5C5470"],["MEDIUM_LIGHT","#B9B4C7"],["LIGHT","#dee7e8"],["GOLDEN_YELLOW","#FFC569"],["LIGHT_GREEN","#27CB72"],["LIGHT_RED","#D95252"],["LIGHT_BLUE","#3CB2FC"]]),t.textureLoader=new o.Tap,t.FONT_DIR="res/Courier_New_Bold.json",t}(),a=i(566);!function(t){t[t.LEFT=0]="LEFT",t[t.RIGHT=1]="RIGHT",t[t.TOP=2]="TOP",t[t.BOTTOM=3]="BOTTOM"}(n||(n={}));var u,c,p=function(){function t(t,e,i){this.clockFrequency=1,this.position={x:t[0],y:t[1]},this.scene=e,this.clockFrequency=i,this.pinPositions=new Map,this.pinGeometries=new Map,this.pinsMeshes=new Map,this.traces=new Map}return t.prototype.getClockFrequency=function(){return this.clockFrequency},t.prototype.getHitBoxMesh=function(){return this.bodyMesh},t.prototype.select=function(){return this.scene.add(this.selectedMesh),this},t.prototype.deselect=function(){this.scene.remove(this.selectedMesh)},t.prototype.drawPins=function(e,i,r){var s=e.geometry instanceof o.bdM?e.geometry.parameters.width:0,h=e.geometry instanceof o.bdM?e.geometry.parameters.height:0,u=i===n.TOP||i===n.BOTTOM,c=((u?s-2*t.PIN_MARGIN:h-2*t.PIN_MARGIN)-r*(2*t.PIN_WIDTH))/(r-1);this.pinPositions.set(i,[]),this.pinGeometries.set(i,[]);for(var p=0;p<r;p++){var d=p*(2*t.PIN_WIDTH+c),l=u?this.position.x-s/2+t.PIN_MARGIN+t.PIN_WIDTH+d:i===n.LEFT?this.position.x-s/2-t.PIN_WIDTH-.01:this.position.x+s/2+t.PIN_WIDTH+.01,f=u?i===n.TOP?this.position.y+h/2+t.PIN_WIDTH+.01:this.position.y-h/2-t.PIN_WIDTH-.01:this.position.y-h/2+t.PIN_MARGIN+t.PIN_WIDTH+d,y=new o.bdM(t.PIN_WIDTH,2*t.PIN_WIDTH);u||y.rotateZ(Math.PI/2),y.translate(l,f,0),this.pinGeometries.get(i).push(y),this.pinPositions.get(i).push(new o.I9Y(l,f))}var g=a.pP(this.pinGeometries.get(i));if(!g)throw new Error("Failed to merge geometries");var m=new o.eaF(g,t.PIN_MATERIAL);this.scene.add(m),this.pinsMeshes.set(i,m)},t.prototype.buildTrace=function(e,i,r,s,h,a){var u=this.calculateExtendedPoint(e,i,h),c=this.calculateExtendedPoint(r,s,2*t.PIN_WIDTH),p=new o.I9Y(i===n.TOP||i===n.BOTTOM?c.x:u.x,i===n.TOP||i===n.BOTTOM?u.y:c.y),d=[new o.Pq0(e.x,e.y,0),new o.Pq0(u.x,u.y,0),new o.Pq0(p.x,p.y,0),new o.Pq0(c.x,c.y,0),new o.Pq0(r.x,r.y,0)],l=(new o.LoY).setFromPoints(d),f=new o.mrM({color:a?a.color:t.PIN_MATERIAL.color});return new o.N1A(l,f)},t.prototype.drawTrace=function(t,e,i,n,o,r,s,h){var a=this.pinPositions.get(i),u=n.pinPositions.get(o),c=0,p=0;a[c][h]>=u[p][h]?c=a.length-1:a[c][h]<u[p][h]&&(p=u.length-1);var d=t>=c?t:c-(c-t),l=t>=p?t:p-(p-t);d=Math.min(d,a.length-1),l=Math.min(l,u.length-1);var f="x"===h?r+(s*(a.length-1)-s*Math.abs(d-c)):r+s*Math.abs(d-c);return this.buildTrace(a[d],i,u[l],o,f,e)},t.prototype.drawTraces=function(e,i,n,r,s,h){for(var a=new o.YJl,u=0;u<this.pinPositions.get(e).length;u++)a.add(this.drawTrace(u,t.PIN_MATERIAL,e,i,n,r,s,h));this.traces.set(e,a),this.scene.add(a)},t.prototype.clearTracesAndPins=function(t){var e;this.pinsMeshes.get(t)&&(h.disposeMesh(this.pinsMeshes.get(t)),this.scene.remove(this.pinsMeshes.get(t)),this.traces.get(t)&&(this.scene.remove(this.traces.get(t)),null===(e=this.traces.get(t))||void 0===e||e.children.forEach((function(t){return h.disposeMesh(t)}))))},t.prototype.calculateExtendedPoint=function(t,e,i){switch(e){case n.LEFT:return new o.I9Y(t.x-i,t.y);case n.RIGHT:return new o.I9Y(t.x+i,t.y);case n.TOP:return new o.I9Y(t.x,t.y+i);case n.BOTTOM:return new o.I9Y(t.x,t.y-i);default:return t}},t.prototype.buildBodyMesh=function(e,i){this.bodyMesh=new o.eaF(new o.bdM(e,i),t.BODY_MATERIAL),this.bodyMesh.position.set(this.position.x,this.position.y,0),this.scene.add(this.bodyMesh),this.buildSelectedMesh()},t.prototype.disposeBodyMesh=function(){this.bodyMesh&&this.selectedMesh&&(this.scene.remove(this.bodyMesh),this.scene.remove(this.selectedMesh),h.disposeMesh(this.bodyMesh),h.disposeMesh(this.selectedMesh),this.bodyMesh=void 0,this.selectedMesh=void 0)},t.prototype.updateClock=function(t){return this.clockFrequency=t,this.clockFrequency},t.prototype.buildSelectedMesh=function(){if(this.bodyMesh){var e=this.bodyMesh.geometry instanceof o.bdM?this.bodyMesh.geometry.parameters.height:0,i=this.bodyMesh.geometry instanceof o.bdM?this.bodyMesh.geometry.parameters.width:0;this.selectedMesh=new o.eaF(new o.bdM(i+.01,e+.01),t.HUD_TEXT_MATERIAL),this.selectedMesh.position.set(this.position.x,this.position.y,-.01)}},t.TEXT_SIZE=.05,t.PIN_MARGIN=.05,t.PIN_WIDTH=.02,t.CONTENTS_MARGIN=.03,t.INNER_SPACING=.01,t.BODY_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("DARK")}),t.HUD_TEXT_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("MEDIUM_LIGHT")}),t.PIN_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("MEDIUM_DARK")}),t.MAX_CLOCK_FREQUENCY=120,t}(),d=function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s},l=function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))},f=function(){function t(t){void 0===t&&(t=1/0);for(var e=[],i=1;i<arguments.length;i++)e[i-1]=arguments[i];this.items=e,this.maxSize=t}return t.of=function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];return new(t.bind.apply(t,l([void 0,1/0],d(e),!1)))},t.prototype.toArray=function(){return this.items.slice()},t.prototype.enqueue=function(t){if(this.isFull())throw new Error("Queue overflow error: attempting to enqueue to a full queue.");this.items.push(t)},t.prototype.dequeue=function(){return this.items.shift()},t.prototype.isEmpty=function(){return 0===this.items.length},t.prototype.isFull=function(){return this.items.length>=this.maxSize},t.prototype.size=function(){return this.items.length},t.prototype.clear=function(){this.items=[]},t.prototype.get=function(t){if(!(t<0||t>=this.items.length))return this.items[t]},t.prototype.remove=function(t){if(!(t<0||t>=this.items.length))return this.items.splice(t,1)[0]},t.prototype.peek=function(){return this.items[0]},t.prototype.moveTo=function(t,e){void 0===e&&(e=this.size());for(var i=0;i<Math.min(e,t.maxSize)&&!this.isEmpty()&&!t.isFull();++i)t.enqueue(this.dequeue())},t.prototype.contains=function(t){return this.items.includes(t)},t.prototype.some=function(t){return this.items.some(t)},t.prototype.every=function(t){return this.items.every(t)},t.prototype.filter=function(e){return new(t.bind.apply(t,l([void 0,this.maxSize],d(this.items.filter(e)),!1)))},t.prototype.slice=function(e,i){if(void 0===e&&(e=0),void 0===i&&(i=this.size()),0==this.size())return new t(this.maxSize);if(e<0||e>=this.size()||i<0||i>this.size())throw new Error("Index out of bounds error: attempting to slice queue outside of bounds.");if(e>i)throw new Error("Invalid index error: start index must be less than or equal to end index.");return new(t.bind.apply(t,l([void 0,this.maxSize],d(this.items.slice(e,i)),!1)))},t.prototype[Symbol.iterator]=function(){var t=0,e=this.items;return{next:function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0,value:null}}}},t.prototype.toString=function(){return this.items.toString()},t}(),y=function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s},g=function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))},m=function(){function t(t,e,i){this.staticMeshes=[],this.liveMeshes=[],this.highlightMeshes=[],this.parent=t,this.scene=t.scene,this.position={x:t.position.x+e,y:t.position.y+i}}return t.prototype.dispose=function(){var t=this;this.clearHighlights(),g(g(g([],y(this.staticMeshes),!1),y(this.liveMeshes),!1),y(this.highlightMeshes),!1).forEach((function(e){t.scene.remove(e),e.geometry.dispose()}))},t.prototype.addStaticMesh=function(t){this.staticMeshes.push(t),this.scene.add(t)},t.prototype.addStaticMeshes=function(){for(var t,e,i=[],n=0;n<arguments.length;n++)i[n]=arguments[n];(t=this.staticMeshes).push.apply(t,g([],y(i),!1)),(e=this.scene).add.apply(e,g([],y(i),!1))},t.prototype.addLiveMesh=function(t){this.liveMeshes.push(t),this.scene.add(t)},t.prototype.addHighlightMesh=function(t){this.highlightMeshes.push(t),this.scene.add(t)},t.prototype.clearHighlights=function(){var t=this;this.highlightMeshes.forEach((function(e){t.scene.remove(e),e.geometry.dispose()})),this.highlightMeshes=[]},t.prototype.instructionMaterial=function(e){return e.isMemoryOperation()?t.MEMORY_MATERIAL:e.isArithmetic()?t.ALU_MATERIAL:t.BRANCH_MATERIAL},t.BODY_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("DARK")}),t.COMPONENT_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("DARKER")}),t.TEXT_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("LIGHT")}),t.MEMORY_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("LIGHT_GREEN")}),t.ALU_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("LIGHT_RED")}),t.BRANCH_MATERIAL=new o.V9B({color:h.COLOR_PALETTE.get("LIGHT_BLUE")}),t.TEXT_SIZE=.05,t}(),M=(u=function(t,e){return u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},u(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function i(){this.constructor=t}u(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),I=function(t){function e(i,n,r,s,a,u,c,p,d){void 0===r&&(r=0),void 0===s&&(s=0),void 0===a&&(a=0),void 0===u&&(u=!1),void 0===c&&(c=!1),void 0===p&&(p=e.BUFFER_BASE_WIDTH),void 0===d&&(d=e.INNER_SPACING);var l=t.call(this,i,r,s)||this;l.bufferMeshOffsets=[],l.highlightedBufferMeshes=[],l.readyToBeRead=!1,l.readTimeout=0,l.storedInstructions=new f(n),l.size=n,l.delay=a,l.reversed=u,l.horizontal=c;var y=e.BUFFER_HEIGHT*n+e.INNER_SPACING*(n-1);l.width=l.horizontal?y:p,l.height=l.horizontal?p:y,l.spacing=d;var g=l.spacing*(l.size-1);return l.rectangleSize=((l.horizontal?l.width:l.height)-g)/l.size,l.noOpMesh=h.buildTextMesh("NOP",0,0,m.TEXT_SIZE,m.BODY_MATERIAL,!0,l.horizontal?Math.PI/2:0),l.bufferHighlightGeometry=new o.bdM(l.horizontal?l.rectangleSize:l.width,l.horizontal?l.height:l.rectangleSize),l}return M(e,t),e.dimensions=function(t,i,n){void 0===n&&(n=e.INNER_SPACING);var o=e.BUFFER_HEIGHT*t+n*(t-1);return{width:i?o:e.BUFFER_BASE_WIDTH,height:i?e.BUFFER_BASE_WIDTH:o}},e.prototype.setPosition=function(t){this.position={x:t[0],y:t[1]}},e.prototype.isFull=function(){return this.storedInstructions.size()===this.size},e.prototype.clear=function(){this.storedInstructions.clear(),this.shiftMeshesDown(1),this.clearHighlights(),this.readyToBeRead=!1},e.prototype.isReadyToBeRead=function(){if(0==this.delay)throw new Error("No delay instruction buffers are always ready to be read");return this.readyToBeRead},e.prototype.peek=function(){return this.clearHighlights(),this.storedInstructions.peek()&&this.highlightBuffer(0),this.storedInstructions.peek()},e.prototype.askForInstructions=function(t,e){if(0==this.delay)throw new Error("There is no need to ask for instructions when there is no delay");if(!(this.readTimeout>0)){for(var i=0;i<e;++i)this.storedInstructions.get(i)&&this.highlightBuffer(i);this.readTimeout=t.getClockFrequency()/this.parent.getClockFrequency()*this.delay}},e.prototype.read=function(t){if(0!=this.delay&&!this.isReadyToBeRead())throw new Error("Instruction buffer from ".concat(this.parent.displayName()," is not ready to be read"));if(t>this.size)throw new Error("Cannot read more instructions than the size of the buffer");if(t>this.storedInstructions.size())return new f(0);var e=new f(t);return this.storedInstructions.moveTo(e,t),this.shiftMeshesDown(t),this.clearHighlights(),this.readyToBeRead=!1,e},e.prototype.write=function(t,e){if(void 0===e&&(e=t.size()),e>this.size)throw new Error("Cannot write more instructions than the size of the buffer");var i=this.storedInstructions.size();t.moveTo(this.storedInstructions,e);for(var n=i;n<this.storedInstructions.size();++n)this.scene.remove(this.liveMeshes[n]),this.liveMeshes[n]=this.buildBufferTextMesh(n),this.scene.add(this.liveMeshes[n])},e.prototype.update=function(){if(0==this.delay)throw new Error("No delay instruction buffers do not need to be updated");this.readTimeout>0&&this.storedInstructions.size()>0&&(--this.readTimeout,this.readyToBeRead=this.readTimeout<=0)},e.prototype.initializeGraphics=function(){this.addStaticMesh(this.buildBuffersMesh());for(var t=0;t<this.size;++t)this.liveMeshes[t]=this.buildBufferTextMesh(t),this.scene.add(this.liveMeshes[t])},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.bufferHighlightGeometry.dispose(),this.noOpMesh.geometry.dispose()},e.prototype.buildBufferTextMesh=function(t,e){if(t<0||t>=this.size)throw new Error("Index out of bounds");var i=this.horizontal?this.bufferMeshOffsets[t]:this.position.x,n=this.horizontal?this.position.y:this.bufferMeshOffsets[t];if(this.storedInstructions.get(t)){var o=this.storedInstructions.get(t).isMemoryOperation()?m.MEMORY_MATERIAL:this.storedInstructions.get(t).isArithmetic()?m.ALU_MATERIAL:m.BRANCH_MATERIAL;return h.buildTextMesh(e||this.storedInstructions.get(t).toString(),i,n,m.TEXT_SIZE,o,!0,this.horizontal?Math.PI/2:0)}return this.noOpMesh.clone().translateX(i).translateY(n)},e.prototype.shiftMeshesDown=function(t){var e=this;if(t<=0)throw new Error("Cannot shift down by a negative number of positions");if(t>this.size)throw new Error("Cannot shift down by more than the size of the buffer");this.liveMeshes.splice(0,t).forEach((function(t){e.scene.remove(t),t.geometry.dispose()})),this.horizontal?this.liveMeshes.forEach((function(i,n){return i.translateX(-e.bufferMeshOffsets[n+t]+e.bufferMeshOffsets[n])})):this.liveMeshes.forEach((function(i,n){return i.translateY(-e.bufferMeshOffsets[n+t]+e.bufferMeshOffsets[n])}));for(var i=this.size-1;i>this.size-t-1;--i)this.liveMeshes[i]=this.noOpMesh.clone().translateX(this.horizontal?this.bufferMeshOffsets[i]:this.position.x).translateY(this.horizontal?this.position.y:this.bufferMeshOffsets[i]),this.scene.add(this.liveMeshes[i])},e.prototype.highlightBuffer=function(t){if(t<0||t>=this.size)throw new Error("Index out of bounds");this.clearHighlights();var e=this.instructionMaterial(this.storedInstructions.get(t)),i=new o.eaF(this.bufferHighlightGeometry,e);i.position.set(this.horizontal?this.bufferMeshOffsets[t]:this.position.x,this.horizontal?this.position.y:this.bufferMeshOffsets[t],.01),this.highlightMeshes.push(i),this.scene.add(i),this.liveMeshes[t].material=m.COMPONENT_MATERIAL,this.storedInstructions.get(t)&&this.highlightedBufferMeshes.push(t)},e.prototype.clearHighlights=function(){var e=this;t.prototype.clearHighlights.call(this),this.highlightedBufferMeshes.forEach((function(t){null!=e.storedInstructions.get(t)&&(e.liveMeshes[t].material=e.instructionMaterial(e.storedInstructions.get(t)))})),this.highlightedBufferMeshes=[]},e.prototype.buildBuffersMesh=function(){for(var t=this.horizontal?this.position.x+(this.reversed?-1:1)*(this.rectangleSize/2-this.width/2):this.position.y+(this.reversed?-1:1)*(this.rectangleSize/2-this.height/2),e=[],i=0;i<this.size;++i){var n=t+(this.reversed?-1:1)*i*(this.rectangleSize+this.spacing),r=this.bufferHighlightGeometry.clone();this.horizontal?r.translate(n,this.position.y,0):r.translate(this.position.x,n,0),this.bufferMeshOffsets.push(n),e.push(r)}var s=a.pP(e,!1);if(!s)throw new Error("Failed to merge geometries");return new o.eaF(s,m.COMPONENT_MATERIAL)},e.BUFFER_HEIGHT=.11,e.BUFFER_BASE_WIDTH=.8,e.INNER_SPACING=.01,e}(m),v=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),E=function(t){function e(i,n,r,s){void 0===n&&(n=0),void 0===r&&(r=0),void 0===s&&(s=e.WIDTH);var h=t.call(this,i,n,r)||this;return h.count=0,h.height=I.BUFFER_HEIGHT,h.highlighted=!1,h.width=s,h.highlightGeometry=new o.bdM(h.width,h.height),h}return v(e,t),e.dimensions=function(){return{width:this.WIDTH,height:I.BUFFER_HEIGHT}},e.prototype.get=function(){return this.count},e.prototype.set=function(t){this.count=t,h.updateText(this.liveMeshes[0],h.toHex(this.count),!0),this.highlighted=!0,this.highlight()},e.prototype.update=function(t){this.highlighted&&this.clearHighlights(),t||h.updateText(this.liveMeshes[0],h.toHex(this.count++),!0)},e.prototype.initializeGraphics=function(){var t=new o.eaF(this.highlightGeometry,e.COMPONENT_MATERIAL);t.position.set(this.position.x,this.position.y,0),this.addStaticMesh(t),this.liveMeshes.push(h.buildTextMesh(h.toHex(this.count),this.position.x,this.position.y,m.TEXT_SIZE,m.TEXT_MATERIAL,!1)),this.liveMeshes[0].geometry.center(),this.scene.add(this.liveMeshes[0])},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.highlightGeometry.dispose()},e.prototype.clearHighlights=function(){t.prototype.clearHighlights.call(this),this.highlighted=!1,this.liveMeshes[0]&&(this.liveMeshes[0].material=m.TEXT_MATERIAL)},e.prototype.highlight=function(){var t=new o.eaF(this.highlightGeometry,m.BRANCH_MATERIAL);t.position.set(this.position.x,this.position.y,0),this.highlightMeshes.push(t),this.scene.add(t),this.liveMeshes[0].material=m.COMPONENT_MATERIAL,this.highlighted=!0},e.WIDTH=.3,e}(m),w=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),T=function(t){function e(i,n,o,r,s){void 0===n&&(n=0),void 0===o&&(o=0),void 0===r&&(r=e.WIDTH);var h=t.call(this,i,n,o)||this;h.fetchingAddress=-1,h.iCache=s,h.height=I.BUFFER_HEIGHT,h.width=r,h.pc=new E(i,n-h.width/2+E.dimensions().width/2,o);var a=h.width-E.dimensions().width-e.SPACING;return h.instructionBuffer=new I(i,1,n+h.width/2-a/2,o,0,!1,!1,a),h}return w(e,t),e.prototype.setInstructionMemory=function(t){this.instructionMemory=t},e.prototype.flush=function(){this.instructionBuffer.clear(),this.fetchingAddress=-1,this.pc.set(0),this.pc.update()},e.prototype.read=function(){var t=this.instructionBuffer.read(1);return t?t.dequeue():void 0},e.prototype.setProgramCounter=function(t){this.pc.set(t),this.fetchingAddress!=t&&this.instructionBuffer.read(1)},e.prototype.next=function(){if(!this.instructionBuffer.isFull()){if(!this.checkMemoryIsReady(this.pc.get()))return this.fetchingAddress=this.pc.get(),void this.askForInstructionsAt(this.pc.get());var t=this.fetchInstructionAt(this.pc.get());if(t){var e=new f(1);e.enqueue(t),this.instructionBuffer.write(e,1),this.pc.update()}}},e.prototype.checkMemoryIsReady=function(t){return this.iCache?this.iCache.isReadyToBeRead(t):null!=this.instructionMemory&&this.instructionMemory.isReadyToBeRead()},e.prototype.askForInstructionsAt=function(t){if(null!=this.instructionMemory){var e=function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s}(this.iCache?this.iCache.askForInstructionAt(t):this.instructionMemory.askForInstructionsAt(this.parent,1,t),2),i=e[0],n=e[1];-1!=i&&this.parent instanceof it&&this.parent.highlightInstructionMemoryTrace(i,n)}},e.prototype.fetchInstructionAt=function(t){if(null==this.instructionMemory)throw new Error("Instruction memory not set");return this.iCache?this.iCache.fetchInstructionAt(t):this.instructionMemory.fetchInstructionAt(t)},e.prototype.initializeGraphics=function(){this.instructionBuffer.initializeGraphics(),this.pc.initializeGraphics()},e.prototype.update=function(){throw new Error("Instruction fetcher should not be updated manually")},e.WIDTH=.9,e.SPACING=.01,e}(m),_=function(){function t(){}return t.ALU_OPCODES=["ADD","SUB","MUL","AND","OR","GT","LT"],t.ALU_IMM_OPCODES=["ADDI","SUBI","MULI"],t.MEMORY_OPCODES=["LOAD","STORE"],t.BRANCH_OPCODES=["BGT","BLT"],t.REGISTER_COUNT=12,t.ZERO_REGISTER=0,t.MAX_BYTE_VALUE=Math.pow(2,16)-1,t}(),O=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),A=function(t){function e(i,n,r,s,h){void 0===r&&(r=0),void 0===s&&(s=0),void 0===h&&(h=e.WIDTH);var a=t.call(this,i,r,s)||this;return a.height=I.BUFFER_HEIGHT,a.textSize=.03,a.highlighted=!1,a.branchStalling=!1,a.instruction=null,a.registers=n,a.width=h,a.highlightGeometry=new o.bdM(a.width,a.height),a}return O(e,t),e.dimensions=function(){return{width:e.WIDTH,height:I.BUFFER_HEIGHT}},e.prototype.flush=function(){this.instruction=null,this.branchStalling=!1,this.highlighted&&this.clearHighlights()},e.prototype.isReady=function(){return null==this.instruction},e.prototype.compute=function(t,e){function i(t,e,i){switch(i){case"ADDI":case"ADD":return t+e;case"SUBI":case"SUB":return t-e;case"MULI":case"MUL":return t*e;case"AND":return t&e;case"OR":return t|e;case"BGT":case"GT":return t>e?1:0;case"BLT":case"LT":return t<e?1:0;default:throw new Error("Invalid ALU opcode: "+i)}}if(this.instruction=e,null!=e){this.drawALUText(),this.highlight();var n=this.read(e.getOp1Reg()),o=e.isImmediate()?e.getImmediate():this.read(e.getOp2Reg());if(this.branchStalling){var r=i(n,o,e.getOpcode());return t.takeBranch(1==r),this.instruction=null,void(this.branchStalling=!1)}if(e.isBranch())return this.branchStalling=!0,void(this.decoder=t);var s=this.preventOverflow(i(n,o,e.getOpcode()));this.write(e.getResultReg(),s),this.parent instanceof it&&this.parent.notifyInstructionRetired(),this.instruction=null}},e.prototype.update=function(){this.highlighted&&this.clearHighlights(),this.branchStalling&&this.compute(this.decoder,this.instruction)},e.prototype.initializeGraphics=function(){var t=new o.eaF(this.highlightGeometry,e.COMPONENT_MATERIAL);t.position.set(this.position.x,this.position.y,0),this.addStaticMesh(t),this.noOpMesh=h.buildTextMesh("NOP",this.position.x,this.position.y,m.TEXT_SIZE,m.BODY_MATERIAL,!0),this.scene.add(this.noOpMesh)},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.highlightGeometry.dispose()},e.prototype.clearHighlights=function(){var e=this;t.prototype.clearHighlights.call(this),this.liveMeshes.forEach((function(t){return e.scene.remove(t)})),this.liveMeshes=[],this.highlighted=!1,this.noOpMesh.visible=!0},e.prototype.highlight=function(){var t=new o.eaF(this.highlightGeometry,m.ALU_MATERIAL);t.position.set(this.position.x,this.position.y,0),this.highlightMeshes.push(t),this.scene.add(t),this.liveMeshes[0].material=m.COMPONENT_MATERIAL,this.highlighted=!0},e.prototype.drawALUText=function(){var t=this,i=function(i,n,o){var r=h.buildTextMesh(i,t.position.x+n,t.position.y+o,t.textSize,e.COMPONENT_MATERIAL);t.liveMeshes.push(r),t.scene.add(r)};this.noOpMesh.visible=!1,null!=this.instruction&&(i(function(t){switch(t){case"ADD":case"ADDI":return"+";case"SUB":case"SUBI":return"-";case"MUL":case"MULI":return"x";case"AND":return"&";case"OR":return"v";case"BGT":case"GT":return">";case"BLT":case"LT":return"<";default:throw new Error("Invalid ALU opcode: "+t)}}(this.instruction.getOpcode()),0,e.OP_Y_OFFSET),i("R"+this.instruction.getOp1Reg(),e.DISTANCE_TO_CENTER,e.OP_Y_OFFSET),i(this.instruction.isImmediate()?this.instruction.getImmediate().toString():"R"+this.instruction.getOp2Reg(),-e.DISTANCE_TO_CENTER,e.OP_Y_OFFSET),i(this.instruction.isBranch()?"DECODER":"R"+this.instruction.getResultReg(),0,e.RES_Y_OFFSET))},e.prototype.preventOverflow=function(t){var e=t%_.MAX_BYTE_VALUE;return e>=0?e:e+_.MAX_BYTE_VALUE},e.prototype.read=function(t){var e=this.registers[0].getSize(),i=Math.floor(t/e);return this.registers[i].read(t%e)},e.prototype.write=function(t,e){var i=this.registers[0].getSize(),n=Math.floor(t/i);this.registers[n].write(t%i,e,this)},e.WIDTH=.6,e.DISTANCE_TO_CENTER=.07,e.OP_Y_OFFSET=-.03,e.RES_Y_OFFSET=.02,e}(m),C=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),R=function(t){function e(i,n,r,s,h,a,u,c){void 0===n&&(n=0),void 0===r&&(r=0),void 0===s&&(s=4),void 0===h&&(h=0);var p=t.call(this,i,n,r)||this;return p.initialTextMaterial=m.TEXT_MATERIAL.clone(),p.recentlyUpdatedMeshes=[],p.cellPositions=[],p.ready=!1,p.highlightedMemoryCell=-1,p.memoryOperationTimeout=0,p.numberOfWords=s,p.delay=h,p.zeroRegister=a,p.bankName=c,p.registerNames=u,p.memoryArray=new Array(p.numberOfWords).fill(e.INITIAL_REG_VALUE),p.width=e.BUFFER_WIDTH,p.height=e.BUFFER_HEIGHT*s+e.INNER_SPACING*(s-1),p.cellHighlightGeometry=new o.bdM(e.BUFFER_WIDTH,e.BUFFER_HEIGHT),p.initialTextMaterial.transparent=!0,p.initialTextMaterial.opacity=.2,p}return C(e,t),e.dimensions=function(t){return{width:e.BUFFER_WIDTH,height:e.BUFFER_HEIGHT*t+e.INNER_SPACING*(t-1)}},e.prototype.getSize=function(){return this.memoryArray.length},e.prototype.isReady=function(){return 0==this.delay||this.ready},e.prototype.askForMemoryOperation=function(t,e){if(0==this.delay)throw new Error("There is no need to ask for memory operations when there is no delay");this.memoryOperationTimeout>0||(this.ready=!1,this.highlightCell(e),this.memoryOperationTimeout=t.getClockFrequency()/this.parent.getClockFrequency())},e.prototype.read=function(t){return this.ensureAddressIsInBounds(t),this.checkIfReady(),this.ready=!1,this.clearHighlights(),this.memoryArray[t]},e.prototype.write=function(t,e,i){this.ensureAddressIsInBounds(t),this.checkIfReady(),t!==this.zeroRegister&&(this.memoryArray[t]=e,h.updateText(this.liveMeshes[t],h.toHex(e),!0),this.clearHighlights(),0==this.delay&&this.highlightCell(t,i),this.ready=!1)},e.prototype.update=function(){var t=this;if(this.memoryOperationTimeout>0&&(this.memoryOperationTimeout--,this.ready=this.memoryOperationTimeout<=0),0==this.delay&&this.highlightMeshes.length>0&&this.clearHighlights(),this.recentlyUpdatedMeshes.length>0){var e=[];this.recentlyUpdatedMeshes.forEach((function(i,n){var o=i.material;o.transparent||(o.transparent=!0),o.opacity-=.01,o.opacity<=t.initialTextMaterial.opacity&&(o.opacity=t.initialTextMaterial.opacity,e.push(n)),h.updateMaterial(i,o)})),e.forEach((function(e){return t.recentlyUpdatedMeshes.splice(e,1)}))}},e.prototype.initializeGraphics=function(){this.addStaticMeshes.apply(this,function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}([],function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s}(this.buildDataCellMeshes(this.registerNames)),!1)),this.bankName&&this.addStaticMesh(h.buildTextMesh(this.bankName,this.position.x,this.position.y+this.height/2+h.baseTextHeight/2,e.TEXT_SIZE,m.TEXT_MATERIAL,!0));for(var t=0;t<this.memoryArray.length;t++)this.addLiveMesh(this.buildDataCellContentsMesh(t))},e.prototype.dispose=function(){t.prototype.dispose.call(this),this.cellHighlightGeometry.dispose()},e.prototype.clearHighlights=function(){t.prototype.clearHighlights.call(this),this.highlightedMemoryCell>=0&&this.liveMeshes[this.highlightedMemoryCell]&&(this.liveMeshes[this.highlightedMemoryCell].material=m.TEXT_MATERIAL.clone(),this.recentlyUpdatedMeshes.includes(this.liveMeshes[this.highlightedMemoryCell])||this.recentlyUpdatedMeshes.push(this.liveMeshes[this.highlightedMemoryCell]),this.highlightedMemoryCell=-1)},e.prototype.buildDataCellContentsMesh=function(t){if(t<0||t>=this.memoryArray.length)throw new Error("Index out of bounds");if(this.memoryArray[t]==e.INITIAL_REG_VALUE){var i=this.cellPositions[t],n=h.buildTextMesh(h.toHex(this.memoryArray[t]),i[0],i[1]-e.BUFFER_HEIGHT/2+h.baseTextHeight/2,e.TEXT_SIZE,this.initialTextMaterial.clone(),!1);return n.geometry.center(),n}throw new Error("No valid data to display (poor initialization ?)")},e.prototype.highlightCell=function(t,e){if(t<0||t>=this.memoryArray.length)throw new Error("Index out of bounds");this.clearHighlights();var i=e&&e instanceof A?m.ALU_MATERIAL:m.MEMORY_MATERIAL,n=new o.eaF(this.cellHighlightGeometry,i),r=this.cellPositions[t];n.position.set(r[0],r[1],0),this.liveMeshes[t].material=m.BODY_MATERIAL,this.highlightedMemoryCell=t,this.addHighlightMesh(n)},e.prototype.buildDataCellMeshes=function(t){var e=this.getStartPositionX(),i=this.getStartPositionY(),n=[],r=[];this.generateGeometries(n,r,t,e,i);var s=a.pP(n,!0),h=a.pP(r,!0);if(!s||!h)throw new Error("Failed to merge geometries");return[new o.eaF(s,m.COMPONENT_MATERIAL),new o.eaF(h,m.BODY_MATERIAL)]},e.prototype.getStartPositionX=function(){return this.position.x-this.width/2+e.BUFFER_WIDTH/2},e.prototype.getStartPositionY=function(){return this.position.y-this.height/2+e.BUFFER_HEIGHT/2},e.prototype.generateGeometries=function(t,i,n,o,r){for(var s=0;s<this.numberOfWords;s++){var h=r+s*(e.BUFFER_HEIGHT+e.INNER_SPACING);this.createCellGeometry(t,o,h),this.createNameGeometry(i,n,s,o,h),this.cellPositions.push([o,h])}},e.prototype.createCellGeometry=function(t,e,i){var n=this.cellHighlightGeometry.clone();n.translate(e,i,0),t.push(n)},e.prototype.createNameGeometry=function(t,i,n,o,r){var s=i?i[n]:h.toHex(n),a=h.buildTextMesh(s,0,0,e.TEXT_SIZE/2,e.BODY_MATERIAL).geometry.center().translate(o,r+e.BUFFER_HEIGHT/2-h.baseTextHeight/4,0);t.push(a)},e.prototype.ensureAddressIsInBounds=function(t){if(t>=this.memoryArray.length||t<0)throw new Error("Address "+t+" is out of bounds for data array from "+this.parent.displayName())},e.prototype.checkIfReady=function(){if(0!==this.delay&&!this.ready)throw new Error("Data array from "+this.parent.displayName()+" is not ready to be read")},e.BUFFER_HEIGHT=.11,e.BUFFER_WIDTH=.3,e.INNER_SPACING=.01,e.INITIAL_REG_VALUE=0,e}(m),S=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),b=function(t){function e(i,n,o,r,s,h,a,u){void 0===s&&(s=0),void 0===h&&(h=0),void 0===a&&(a=e.BUFFER_BASE_WIDTH),void 0===u&&(u=!1);var c=t.call(this,i,1,s,h,0,!1,u,a,0)||this;return c.pipelined=!1,c.fetcher=n,c.alu=o,c.io=r,c}return S(e,t),e.prototype.setPipelined=function(){this.pipelined=!0},e.prototype.flush=function(){this.clear()},e.prototype.takeBranch=function(t){t?this.fetcher.setProgramCounter(this.storedInstructions.dequeue().getAddress()):this.storedInstructions.dequeue(),this.parent instanceof it&&this.parent.notifyInstructionRetired()},e.prototype.decode=function(){var t=this.alu.isReady()&&this.io.isReady();if(this.storedInstructions.isEmpty()){if(!this.pipelined&&!t)return;var e=this.fetcher.read();if(!e)return void this.fetcher.next();this.enqueueInstruction(e)}this.pipelined&&!this.storedInstructions.get(0).isBranch()&&this.fetcher.next(),t&&this.decodeInstruction()},e.prototype.enqueueInstruction=function(t){this.storedInstructions.enqueue(t),this.liveMeshes[0]&&this.scene.remove(this.liveMeshes[0]);var e=this.buildBufferTextMesh(0);this.liveMeshes[0]=e,this.scene.add(e)},e.prototype.decodeInstruction=function(){var t=this.storedInstructions.peek();t&&(t.isArithmetic()?this.alu.compute(this,this.storedInstructions.dequeue()):t.isMemoryOperation()?this.io.processIO(this.storedInstructions.dequeue()):t.isBranch()&&this.alu.compute(this,t))},e.prototype.update=function(){this.liveMeshes[0]&&this.storedInstructions.isEmpty()&&(this.scene.remove(this.liveMeshes[0]),this.liveMeshes[0].geometry.dispose(),this.liveMeshes[0]=this.buildBufferTextMesh(0),this.scene.add(this.liveMeshes[0])),this.decode()},e.prototype.read=function(t){throw new Error("Decoder should not be read from")},e}(I),N=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),B=function(t){function e(i,n,o,r,s,h){void 0===o&&(o=0),void 0===r&&(r=0),void 0===s&&(s=e.BUFFER_BASE_WIDTH),void 0===h&&(h=!0);var a=t.call(this,i,1,o,r,0,!1,h,s,0)||this;return a.registers=n,a}return N(e,t),e.prototype.setWorkingMemory=function(t){this.memory=t},e.prototype.flush=function(){this.clear()},e.prototype.isReady=function(){return this.storedInstructions.isEmpty()},e.prototype.processIO=function(t){if(null!=t&&null!=this.memory){this.isReady()&&this.enqueueInstruction(t);var i=this.storedInstructions.peek();null!=i&&(this.memory.isReady(i.getAddress())?this.executeInstruction(i):(this.memory.askForMemoryOperation(this.parent,i.getAddress()),this.parent instanceof it&&this.parent.highlightMainMemoryTrace(Math.floor(i.getAddress()),e.MEMORY_MATERIAL)))}},e.prototype.update=function(){this.storedInstructions.isEmpty()?this.parent instanceof it&&this.parent.clearHighlightedTraces():this.processIO(this.storedInstructions.peek())},e.prototype.read=function(t){throw new Error("Decoder should not be read from.")},e.prototype.write=function(t,e){throw void 0===e&&(e=t.size()),new Error("Decoder should not be written to, use processIO() instead.")},e.prototype.enqueueInstruction=function(t){this.storedInstructions.enqueue(t),this.liveMeshes[0]&&this.scene.remove(this.liveMeshes[0]);var e=this.buildBufferTextMesh(0,this.shortMemoryInstruction(t));this.liveMeshes[0]=e,this.scene.add(e),this.highlightBuffer(0)},e.prototype.executeInstruction=function(t){if(null!=this.memory){var e=t.getResultReg();if("LOAD"==t.getOpcode()){var i=this.registers[0].getSize();this.registers[Math.floor(e/i)].write(e%i,this.memory.read(t.getAddress()))}else"STORE"==t.getOpcode()&&this.memory.write(t.getAddress(),e);this.storedInstructions.dequeue(),this.parent instanceof it&&this.parent.notifyInstructionRetired(),this.updateBufferText()}},e.prototype.updateBufferText=function(){this.scene.remove(this.liveMeshes[0]),this.liveMeshes=[],this.clearHighlights();var t=this.buildBufferTextMesh(0);this.liveMeshes[0]=t,this.scene.add(t)},e.prototype.shortMemoryInstruction=function(t){return("LOAD"==t.getOpcode()?"LD ":"ST ")+"["+h.toHex(t.getAddress())+"]"},e}(I),P=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),x=function(t){function e(e,i,n,o){void 0===i&&(i=0),void 0===n&&(n=0);var r=t.call(this,e,i,n)||this;return r.registers=[],r.iCache=o,r}return P(e,t),e.dimensions=function(){return{width:B.BUFFER_HEIGHT+4*R.dimensions(_.REGISTER_COUNT/4).width+3*e.INNER_SPACING_L,height:3*A.dimensions().height+4*e.INNER_SPACING_L+R.dimensions(_.REGISTER_COUNT/4).height}},e.prototype.setInstructionMemory=function(t){null==t?this.instructionFetcher.setInstructionMemory(void 0):this.instructionFetcher.setInstructionMemory(t.getInstructionBuffer())},e.prototype.setWorkingMemory=function(t){this.IOInterface.setWorkingMemory(t)},e.prototype.setPipelined=function(){this.decoder.setPipelined()},e.prototype.flushPipeline=function(){this.instructionFetcher.flush(),this.decoder.flush(),this.alu.flush(),this.IOInterface.flush()},e.prototype.initializeGraphics=function(){var t=A.dimensions(),i=R.dimensions(_.REGISTER_COUNT/4),n=4*i.width+3*e.INNER_SPACING_L;this.height=3*t.height+e.INNER_SPACING_L*(_.REGISTER_COUNT/4)+i.height,this.width=B.BUFFER_HEIGHT+4*i.width+4*e.INNER_SPACING_L;for(var o=new Array(_.REGISTER_COUNT).fill(0).map((function(t,e){return"R".concat(e)})),r=0;r<4;r++){var s=new R(this.parent,this.position.x-this.width/2+B.BUFFER_HEIGHT+e.INNER_SPACING_L+i.width/2+r*(i.width+e.INNER_SPACING_L),this.position.y+this.height/2-i.height/2,_.REGISTER_COUNT/4,0,_.ZERO_REGISTER,o.slice(r*(_.REGISTER_COUNT/4),(r+1)*(_.REGISTER_COUNT/4)));this.registers.push(s)}var h=i.height+t.height+e.INNER_SPACING_L;this.IOInterface=new B(this.parent,this.registers,this.position.x-this.width/2+B.BUFFER_HEIGHT/2,this.position.y+this.height/2-h/2,h,!0),this.alu=new A(this.parent,this.registers,this.position.x+this.width/2-n/2,this.position.y-this.height/2+2*t.height+2*e.INNER_SPACING_L+t.height/2,n),this.instructionFetcher=new T(this.parent,this.position.x,this.position.y-this.height/2+t.height/2,this.width,this.iCache),this.decoder=new b(this.parent,this.instructionFetcher,this.alu,this.IOInterface,this.position.x,this.position.y-this.height/2+t.height/2+e.INNER_SPACING_L+t.height,this.width),this.instructionFetcher.initializeGraphics(),this.registers.forEach((function(t){return t.initializeGraphics()})),this.alu.initializeGraphics(),this.IOInterface.initializeGraphics(),this.decoder.initializeGraphics()},e.prototype.update=function(){this.registers.forEach((function(t){return t.update()})),this.alu.update(),this.IOInterface.update(),this.decoder.update()},e.INNER_SPACING_L=.02,e}(m),L=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),F=function(t){function e(i,n,o,r){void 0===n&&(n=0),void 0===o&&(o=0),void 0===r&&(r=e.WIDTH);var s=t.call(this,i,n,o)||this;s.valid=!1,s.height=I.BUFFER_HEIGHT,s.width=r,s.addressTag=new E(i,n-s.width/2+E.dimensions().width/2,o);var h=s.width-E.dimensions().width-e.SPACING;return s.instructionBuffer=new I(i,1,n+s.width/2-h/2,o,0,!1,!1,h),s}return L(e,t),e.dimensions=function(){return{width:e.WIDTH,height:I.BUFFER_HEIGHT}},e.prototype.clear=function(){this.valid=!1,this.addressTag.set(0),this.instructionBuffer.clear()},e.prototype.isValid=function(){return this.valid},e.prototype.getAddressTag=function(){return this.addressTag.get()},e.prototype.read=function(){if(!this.valid)throw new Error("Invalid cache line read");return this.instructionBuffer.peek()},e.prototype.write=function(t,e){this.valid=!0,this.addressTag.set(e),this.instructionBuffer.clear(),this.instructionBuffer.write(f.of(t)),this.instructionBuffer.peek()},e.prototype.invalidate=function(){this.valid=!1},e.prototype.clearHighlights=function(){this.addressTag.clearHighlights(),this.instructionBuffer.clearHighlights()},e.prototype.initializeGraphics=function(){this.addressTag.initializeGraphics(),this.instructionBuffer.initializeGraphics()},e.prototype.update=function(){this.addressTag.update(!0)},e.WIDTH=.9,e.SPACING=.01,e}(m),H=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),G=function(t){function e(i,n,o,r,s,h){void 0===n&&(n=0),void 0===o&&(o=0),void 0===r&&(r=4),void 0===s&&(s=.9),void 0===h&&(h=1);var a=t.call(this,i,n,o)||this;a.readTimeout=0,a.readyToBeRead=!1,a.requestedAddress=-1,a.delay=h,a.cacheLines=[];for(var u=F.dimensions().height,c=o-(r*u+(r-1)*e.INNER_SPACING)/2+u/2,p=0;p<r;p++)a.cacheLines.push(new F(i,n,c+p*(u+e.INNER_SPACING),s));return a}return H(e,t),e.prototype.setInstructionMemory=function(t){this.instructionMemory=t},e.prototype.flush=function(){this.cacheLines.forEach((function(t){return t.clear()}))},e.prototype.isReadyToBeRead=function(t){if(0==this.delay)throw new Error("No delay instruction buffers are always ready to be read");return this.readyToBeRead&&null!=this.cacheLineContaining(t)},e.prototype.askForInstructionAt=function(t){if(0==this.delay)throw new Error("No delay instruction buffers are always ready to be read");if(t==this.requestedAddress&&this.readTimeout>0)return[-1,null];if(this.requestedAddress=t,null!=this.cacheLineContaining(t))this.readTimeout=this.delay;else{if(!this.instructionMemory.isReadyToBeRead())return this.cacheLines.forEach((function(t){return t.clearHighlights()})),this.instructionMemory.askForInstructionsAt(this.parent,1,t);this.cacheLines[0].write(this.instructionMemory.fetchInstructionAt(t),t),this.cacheLines.push(this.cacheLines.shift())}return[-1,null]},e.prototype.fetchInstructionAt=function(t){if(0!=this.delay&&!this.isReadyToBeRead(t))throw new Error("Instruction buffer from ".concat(this.parent.displayName()," is not ready to be read"));var e=this.cacheLineContaining(t);if(null==e)throw new Error("Address ".concat(t," not found in cache"));return this.readyToBeRead=!1,this.cacheLines.forEach((function(t){return t.clearHighlights()})),this.cacheLines.push(this.cacheLines.splice(e,1)[0]),this.cacheLines[e].read()},e.dimensions=function(t){void 0===t&&(t=4);var i=F.dimensions();return{width:i.width,height:t*i.height+(t-1)*e.INNER_SPACING}},e.prototype.initializeGraphics=function(){this.cacheLines.forEach((function(t){return t.initializeGraphics()})),this.width=F.dimensions().width,this.height=e.dimensions(this.cacheLines.length).height},e.prototype.update=function(){this.cacheLines.forEach((function(t){return t.update()})),this.readTimeout>0&&(--this.readTimeout,this.readTimeout<=0&&(this.requestedAddress=-1,this.readyToBeRead=!0))},e.prototype.cacheLineContaining=function(t){for(var e=0;e<this.cacheLines.length;e++)if(this.cacheLines[e].isValid()&&this.cacheLines[e].getAddressTag()==t)return e},e.INNER_SPACING=.01,e}(m),k=function(t,e){this.stats=t,this.upgradeOptions=e};!function(t){t[t.None=0]="None",t[t.NumberSelection=1]="NumberSelection",t[t.SingleValueSelection=2]="SingleValueSelection"}(c||(c={}));var D,U=function(){function t(t,e,i,n,o,r,s,h){if(this.name=t,this.cost=e,this.type=i,this.description=n,this.currentValue=o,this.nestedOptions=r,this.type===c.NumberSelection){if(!s)throw new Error("onIncrease is required for NumberSelection type");if(this.onIncrease=s,!h)throw new Error("onDecrease is required for NumberSelection type");this.onDecrease=h}}return t.createNumberSelection=function(e,i,n,o,r,s){return new t(e,i,c.NumberSelection,n,o,void 0,r,s)},t.createSingleValueSelection=function(e,i,n,o){return new t(e,i,c.SingleValueSelection,n,o)},t}(),z=function(t,e,i,n){this.name=t,this.value=e,this.unit=i,this.button=n},q=function(){function t(t){this.scene=t}return t.prototype.isClickable=function(){return void 0!==this.onClick},t.prototype.isHoverable=function(){return!(void 0===this.onHover||void 0===this.onUnhover)},t.prototype.destroy=function(){this.scene.remove(this.getHitbox()),h.disposeMesh(this.getHitbox())},t}(),Y=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),W=function(t){function e(i,n,r,s,u){var c=t.call(this,i)||this;c.isPaused=!0,c.hitbox=h.buildQuadrilateralMesh(.1,.1,r,n),c.hitbox.visible=!1,c.runMesh=h.buildTriangleMesh(.1,r).translateX(n.x).translateY(n.y).rotateZ(-Math.PI/2);var p=new o.bdM(.03,.1),d=(0,a.pP)([p.clone().translate(.025,0,0),p.clone().translate(-.025,0,0)]);return c.pauseMesh=new o.eaF(d,r),c.pauseMesh.position.set(n.x,n.y,0),s?(c.runMesh.visible=!0,c.pauseMesh.visible=!1):(c.runMesh.visible=!1,c.pauseMesh.visible=!0),c.scene.add(c.runMesh,c.pauseMesh,c.hitbox),c.onClick=function(){c.isPaused=!c.isPaused,c.runMesh.visible=!c.isPaused,c.pauseMesh.visible=c.isPaused,u()},c.onHover=function(){var t=c.isPaused?c.pauseMesh:c.runMesh;e.changeMeshAppearance(t,J.HOVER_COLOR,J.HOVER_SCALE_FACTOR)},c.onUnhover=function(){var t=c.isPaused?c.pauseMesh:c.runMesh;e.changeMeshAppearance(t,r,1)},c}return Y(e,t),e.prototype.getHitbox=function(){return this.hitbox},e.changeMeshAppearance=function(t,e,i){t.material=e,i&&t.scale.set(i,i,i)},e}(q),X=function(){function t(t,e,i,n){var r=this;this.hud=t,this.app=e,this.hudCamera=i,this.buttons=n,this.raycaster=new o.tBo,this.mouse=new o.I9Y,this.mouseDown=!1,this.initialMousePosition=new o.I9Y,this.chipMenuButtons=[],this.onMouseDown=function(t){r.mouseDown=!0,r.initialMousePosition.set(t.clientX,t.clientY)},this.onMouseUp=function(){r.mouseDown=!1},this.onMouseWheel=function(t){r.app.camera.zoom+=t.deltaY*-J.ZOOM_FACTOR,r.app.camera.zoom=Math.max(J.MAX_ZOOM,r.app.camera.zoom),r.app.camera.zoom=Math.min(J.MIN_ZOOM,r.app.camera.zoom),r.app.camera.updateProjectionMatrix()},this.onMouseDrag=function(t){if(r.mouseDown){var e=(t.clientX-r.initialMousePosition.x)/window.innerWidth,i=(t.clientY-r.initialMousePosition.y)/window.innerHeight;r.moveCamera(e,i),r.initialMousePosition.set(t.clientX,t.clientY)}},document.addEventListener("click",this.onMouseClick.bind(this),!1),document.addEventListener("mousemove",this.onMouseMove.bind(this),!1),document.addEventListener("mousedown",this.onMouseDown),document.addEventListener("mousemove",this.onMouseDrag),document.addEventListener("mouseup",this.onMouseUp),document.addEventListener("wheel",this.onMouseWheel),document.addEventListener("touchstart",this.onTouchStart.bind(this),!1),document.addEventListener("touchmove",this.onTouchMove.bind(this),!1),document.addEventListener("touchend",this.onTouchEnd.bind(this),!1),window.addEventListener("resize",(function(){return r.onWindowResize()}))}return t.prototype.updateMouseCoordinates=function(t){this.mouse.x=t.clientX/window.innerWidth*2-1,this.mouse.y=-t.clientY/window.innerHeight*2+1},t.prototype.onMouseClick=function(t){var e=this;this.updateMouseCoordinates(t),this.raycaster.setFromCamera(this.mouse,this.hudCamera),this.chipMenuButtons.forEach((function(t){t.isClickable()&&e.raycaster.intersectObject(t.getHitbox()).length>0&&t.onClick()})),this.buttons.forEach((function(t){t.isClickable()&&e.raycaster.intersectObject(t.getHitbox()).length>0&&t.onClick()})),this.raycaster.intersectObject(this.hud.getComputerChipMenu().backgroundMeshHitbox()).length>0||(this.raycaster.setFromCamera(this.mouse,this.app.camera),this.app.gameActors.forEach((function(t){e.raycaster.intersectObject(t.getHitBoxMesh()).length>0&&e.hud.selectActor(t)})))},t.prototype.onMouseMove=function(t){this.updateMouseCoordinates(t),this.checkHoverState()},t.prototype.checkHoverState=function(){var t=this;this.raycaster.setFromCamera(this.mouse,this.hudCamera),this.buttons.concat(this.chipMenuButtons).forEach((function(e){e.isHoverable()&&(t.raycaster.intersectObject(e.getHitbox()).length>0?e.onHover():e.onUnhover())}))},t.prototype.onTouchStart=function(t){t.preventDefault();var e=t.touches[0];this.mouseDown=!0,this.initialMousePosition.set(e.clientX,e.clientY),this.onMouseDown({clientX:e.clientX,clientY:e.clientY})},t.prototype.onTouchMove=function(t){if(this.mouseDown){t.preventDefault();var e=t.touches[0],i=(e.clientX-this.initialMousePosition.x)/window.innerWidth,n=(e.clientY-this.initialMousePosition.y)/window.innerHeight;this.moveCamera(i,n),this.initialMousePosition.set(e.clientX,e.clientY)}},t.prototype.onTouchEnd=function(){this.mouseDown=!1,this.onMouseUp()},t.prototype.onWindowResize=function(){var t=window.innerWidth/window.innerHeight;this.app.camera.left=-t,this.app.camera.right=t,this.hudCamera.left=-t,this.hudCamera.right=t,this.app.camera.updateProjectionMatrix(),this.hudCamera.updateProjectionMatrix(),this.app.renderer.setSize(window.innerWidth,window.innerHeight),this.hud.reset()},t.prototype.moveCamera=function(t,e){var i=window.innerWidth/window.innerHeight*J.SCROLL_SPEED/this.app.camera.zoom,n=J.SCROLL_SPEED/this.app.camera.zoom;this.app.camera.position.x-=t*i,this.app.camera.position.x=Math.max(-J.MAX_CAMERA_POSITION_X,this.app.camera.position.x),this.app.camera.position.x=Math.min(J.MAX_CAMERA_POSITION_X,this.app.camera.position.x),this.app.camera.position.y+=e*n,this.app.camera.position.y=Math.max(-J.MAX_CAMERA_POSITION_Y,this.app.camera.position.y),this.app.camera.position.y=Math.min(J.MAX_CAMERA_POSITION_Y,this.app.camera.position.y)},t}(),j=function(){function t(t,e,i){this.cpus=i;var n=this.ipcString();this.ipcStringLength=n.length,this.IPCMesh=h.buildTextMesh("IPC: "+n,e.x,e.y,J.TEXT_SIZE,J.BASE_COLOR,!1),this.IPCMeshBackground=h.addBackgroundMesh(this.IPCMesh,e,J.MENU_COLOR);var r=this.ipsString();this.ipsStringLength=r.length,this.IPSMesh=h.buildTextMesh("IPS: "+r,e.x,e.y+.1,J.TEXT_SIZE,J.BASE_COLOR,!1),this.IPSMeshBackground=h.addBackgroundMesh(this.IPSMesh,new o.I9Y(e.x,e.y+.1),J.MENU_COLOR);var s=this.retiredInstructionsString();this.totalExecutedInstructionsStringLength=s.length,this.totalExecutedInstructions=h.buildTextMesh("Retired instructions: "+s,e.x,e.y+.2,J.TEXT_SIZE,J.BASE_COLOR,!1),this.totalExecutedInstructionsBackground=h.addBackgroundMesh(this.totalExecutedInstructions,new o.I9Y(e.x,e.y+.2),J.MENU_COLOR),t.add(this.IPCMesh,this.IPSMesh,this.totalExecutedInstructions,this.IPCMeshBackground,this.IPSMeshBackground,this.totalExecutedInstructionsBackground),this.scene=t,this.position=e}return t.prototype.update=function(){var t=this.cpus.reduce((function(t,e){return t+e.getIPC()}),0).toFixed(2);h.updateText(this.IPCMesh,"IPC: "+t,!1),t.length>this.ipcStringLength&&(this.scene.remove(this.IPCMeshBackground),this.IPCMeshBackground=h.addBackgroundMesh(this.IPCMesh,this.position,J.MENU_COLOR),this.scene.add(this.IPCMeshBackground),this.ipcStringLength=t.length);var e=this.cpus.reduce((function(t,e){return t+e.getAccRetiredInstructionsCount()}),0);h.updateText(this.totalExecutedInstructions,"Retired instructions: "+e,!1),e.toString().length>this.totalExecutedInstructionsStringLength&&(this.scene.remove(this.totalExecutedInstructionsBackground),this.totalExecutedInstructionsBackground=h.addBackgroundMesh(this.totalExecutedInstructions,new o.I9Y(this.position.x,this.position.y+.2),J.MENU_COLOR),this.scene.add(this.totalExecutedInstructionsBackground),this.totalExecutedInstructionsStringLength=e.toString().length);var i=this.cpus.reduce((function(t,e){return t+e.getIPS()}),0).toFixed(2);h.updateText(this.IPSMesh,"IPS: "+i,!1),i.length>this.ipsStringLength&&(this.scene.remove(this.IPSMeshBackground),this.IPSMeshBackground=h.addBackgroundMesh(this.IPSMesh,new o.I9Y(this.position.x,this.position.y+.1),J.MENU_COLOR),this.scene.add(this.IPSMeshBackground),this.ipsStringLength=i.length)},t.prototype.clear=function(){this.scene.remove(this.IPCMesh,this.IPSMesh,this.totalExecutedInstructions,this.IPCMeshBackground,this.IPSMeshBackground,this.totalExecutedInstructions),h.disposeMeshes(this.IPCMesh,this.IPSMesh,this.totalExecutedInstructions,this.IPCMeshBackground,this.IPSMeshBackground,this.totalExecutedInstructionsBackground)},t.prototype.ipcString=function(){return this.cpus.reduce((function(t,e){return t+e.getIPC()}),0).toFixed(2)},t.prototype.ipsString=function(){return this.cpus.reduce((function(t,e){return t+e.getIPS()}),0).toFixed(2)},t.prototype.retiredInstructionsString=function(){return this.cpus.reduce((function(t,e){return t+e.getAccRetiredInstructionsCount()}),0).toString()},t}(),Z=function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s},V=function(){function t(e,i,n){this.scene=e,this.hudCamera=i,this.buttons=[],this.chipMenuMeshes=[],this.chipMenuButtons=[],this.rightmostStatX=0;var r=this.hudCamera.right-.2,s=this.hudCamera.bottom+.5;this.menuMesh=h.buildQuadrilateralMesh(2*i.right,.8*i.top,t.MENU_COLOR,new o.I9Y(this.hudCamera.position.x,this.hudCamera.position.y-.8*this.hudCamera.top)),this.menuMesh.visible=!1,this.title=h.buildTextMesh("undefined",this.hudCamera.left+.1,s,J.TEXT_SIZE,J.HOVER_COLOR,!1),this.title.visible=!1,this.closeButton=new $(this.scene,"[X]",new o.I9Y(r,s),(function(){return n()})),this.closeButton.mesh.visible=!1,this.buttons.push(this.closeButton),this.scene.add(this.menuMesh,this.title)}return t.prototype.getButtons=function(){return this.buttons},t.prototype.getMenuButtons=function(){return this.chipMenuButtons},t.prototype.backgroundMeshHitbox=function(){return this.menuMesh},t.prototype.showMenu=function(t){h.updateText(this.title,t?t.displayName():"undefined",!1),this.title.position.x=this.hudCamera.left+.1,this.menuMesh.visible=!0,this.title.visible=!0,this.closeButton.mesh.visible=!0,this.renderChipMenu(t.getMenuOptions())},t.prototype.hideMenu=function(){this.menuMesh.visible=!1,this.title.visible=!1,this.closeButton.mesh.visible=!1,this.clearMenu(),this.rightmostStatX=0},t.prototype.renderChipMenu=function(t){var e=this;this.renderStats(t),t.upgradeOptions.forEach((function(i,n){return e.renderUpgradeOption(i,n,t.upgradeOptions.length)}))},t.prototype.clearMenu=function(){var t=this;this.chipMenuMeshes.forEach((function(e){return t.scene.remove(e)})),this.chipMenuMeshes=[],this.chipMenuButtons.forEach((function(t){return t.dispose()})),this.chipMenuButtons=[]},t.prototype.renderUpgradeOption=function(t,e,i){var n=Z(this.renderOptionTitle(t,e,i),2),o=n[0],r=n[1];switch(this.renderDescription(t.description,o,r),t.type){case c.NumberSelection:this.renderNumberSelection(t,o,r);break;case c.SingleValueSelection:this.renderSingleValueSelection(t,o,r);break;default:throw new Error("Unknown upgrade option type: ".concat(t.type))}},t.prototype.renderStats=function(t){var e=this;t.stats.forEach((function(t,i){var n="".concat(t.name,": ").concat(t.value?t.value:"").concat(t.unit?t.unit:""),r=e.title.position.y-.05-.06*(i+1),s=e.hudCamera.left+.1,a=h.buildTextMesh(n,s,r,J.TEXT_SIZE/2,J.HOVER_COLOR,!1);if(a.geometry.computeBoundingBox(),null===a.geometry.boundingBox)throw new Error("Bounding box is null");var u=a.geometry.boundingBox.max.x;u>e.rightmostStatX&&(e.rightmostStatX=u);var c=a.geometry.boundingBox.min.x;if(t.button){var p=t.button.withScene(e.scene).withPosition(new o.I9Y(s+u-c+.05,r)).withTextSize(J.TEXT_SIZE/2).withCentered(!1).build();if(e.chipMenuButtons.push(p),p.mesh.geometry.computeBoundingBox(),null===p.mesh.geometry.boundingBox)throw new Error("Bounding box is null");var d=p.mesh.geometry.boundingBox.max.x;d>e.rightmostStatX&&(e.rightmostStatX=d)}e.scene.add(a),e.chipMenuMeshes.push(a)}))},t.prototype.renderOptionTitle=function(t,e,i){var n=t.name,o=this.hudCamera.right-this.hudCamera.left-this.rightmostStatX,r=this.hudCamera.bottom+.4,s=this.rightmostStatX+.1;if(1===i)s+=this.hudCamera.left+o/2;else{var a=.4*o/(i-1);s+=this.hudCamera.left+.3*o+e*a}var u=h.buildTextMesh(n,s,r,J.TEXT_SIZE/2,J.HOVER_COLOR,!1);return u.geometry.center(),this.scene.add(u),this.chipMenuMeshes.push(u),[s,r]},t.prototype.renderDescription=function(t,e,i){for(var n=this,o=[],r=0;r<t.length;r+=20){var s=t.substring(r,r+20);if(20===s.length){var a=s.lastIndexOf(" ");s=s.substring(0,a),r-=20-a}o.push(s)}o.forEach((function(t,o){var r=i-.15-.035*(o+1),s=h.buildTextMesh(t,e,r,J.TEXT_SIZE/2,J.HOVER_COLOR,!1);s.geometry.center(),n.scene.add(s),n.chipMenuMeshes.push(s)}))},t.prototype.renderNumberSelection=function(t,e,i){var n=h.buildTextMesh(t.currentValue.toString(),e,i-.1,J.TEXT_SIZE,J.HOVER_COLOR,!1);n.geometry.center(),this.scene.add(n),this.chipMenuMeshes.push(n);var r=new $(this.scene,"[+]",new o.I9Y(e+.1,i-.1),(function(){t.currentValue=t.onIncrease(),h.updateText(n,t.currentValue.toString(),!0)})),s=new $(this.scene,"[-]",new o.I9Y(e-.1,i-.1),(function(){t.currentValue=t.onDecrease(),h.updateText(n,t.currentValue.toString(),!0)}));this.chipMenuButtons.push(r,s)},t.prototype.renderSingleValueSelection=function(t,e,i){},t.prototype.destroy=function(){var t=this;this.scene.remove(this.menuMesh,this.title),this.closeButton.dispose(),this.buttons.forEach((function(t){return t.dispose()})),this.chipMenuButtons.forEach((function(t){return t.dispose()})),this.chipMenuMeshes.forEach((function(e){return t.scene.remove(e)})),h.disposeMeshes.apply(h,function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}([this.menuMesh,this.title],Z(this.chipMenuMeshes),!1))},t.MENU_COLOR=new o.V9B({color:h.COLOR_PALETTE.get("MEDIUM_DARK")}),t}(),K=function(){function t(e,i){this.scene=e,this.position=i,this.dirtyMesh=!1,this.power=t.INITIAL_POWER,this.initializeGraphics().then()}return t.prototype.initializeGraphics=function(){return e=this,i=void 0,r=function(){var e;return function(t,e){var i,n,o,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=h(0),s.throw=h(1),s.return=h(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function h(h){return function(a){return function(h){if(i)throw new TypeError("Generator is already executing.");for(;s&&(s=0,h[0]&&(r=0)),r;)try{if(i=1,n&&(o=2&h[0]?n.return:h[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,h[1])).done)return o;switch(n=0,o&&(h=[2&h[0],o.value]),h[0]){case 0:case 1:o=h;break;case 4:return r.label++,{value:h[1],done:!1};case 5:r.label++,n=h[1],h=[0];continue;case 7:h=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==h[0]&&2!==h[0])){r=0;continue}if(3===h[0]&&(!o||h[1]>o[0]&&h[1]<o[3])){r.label=h[1];break}if(6===h[0]&&r.label<o[1]){r.label=o[1],o=h;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(h);break}o[2]&&r.ops.pop(),r.trys.pop();continue}h=e.call(t,r)}catch(t){h=[6,t],n=0}finally{i=o=0}if(5&h[0])throw h[1];return{value:h[0]?h[1]:void 0,done:!0}}([h,a])}}}(this,(function(i){switch(i.label){case 0:return e=this,[4,h.buildImageMesh(t.POWER_IMG,.1,.1)];case 1:if(e.powerImg=i.sent(),this.valueMesh=h.buildTextMesh(this.power.toString(),this.position.x,this.position.y,J.TEXT_SIZE,J.BASE_COLOR,!1),this.valueMesh.geometry.computeBoundingBox(),null===this.valueMesh.geometry.boundingBox)throw new Error("Bounding box is null");return this.powerImg.position.set(this.valueMesh.position.x+this.valueMesh.geometry.boundingBox.max.x-this.valueMesh.geometry.boundingBox.min.x+.05,this.valueMesh.position.y+(this.valueMesh.geometry.boundingBox.max.y-this.valueMesh.geometry.boundingBox.min.y)/2,0),this.bgMesh=h.addBackgroundMesh(this.valueMesh,new o.I9Y(this.valueMesh.position.x+.04,this.valueMesh.position.y),J.MENU_COLOR,.1),this.scene.add(this.powerImg,this.valueMesh,this.bgMesh),[2]}}))},new((n=void 0)||(n=Promise))((function(t,o){function s(t){try{a(r.next(t))}catch(t){o(t)}}function h(t){try{a(r.throw(t))}catch(t){o(t)}}function a(e){var i;e.done?t(e.value):(i=e.value,i instanceof n?i:new n((function(t){t(i)}))).then(s,h)}a((r=r.apply(e,i||[])).next())}));var e,i,n,r},t.prototype.update=function(){this.dirtyMesh&&(h.updateText(this.valueMesh,this.power.toString(),!1),this.dirtyMesh=!1)},t.prototype.getPower=function(){return this.power},t.prototype.destroy=function(){this.scene.remove(this.powerImg,this.valueMesh,this.bgMesh),h.disposeMeshes(this.powerImg,this.valueMesh,this.bgMesh)},t.INITIAL_POWER=100,t.POWER_IMG="res/power.png",t}(),J=function(){function t(t){this.app=t,this.buttons=[],this.initializeHUDScene(),this.eventHandler=new X(this,this.app,this.hudCamera,this.buttons)}return t.prototype.getHUDScene=function(){return this.hudScene},t.prototype.getHUDCamera=function(){return this.hudCamera},t.prototype.update=function(){this.HUDProcessorStats.update()},t.prototype.getComputerChipMenu=function(){return this.menu},t.prototype.selectActor=function(t){this.selectedActor&&(this.selectedActor.deselect(),this.hideMenu()),this.selectedActor=t.select(),this.showMenu()},t.prototype.togglePauseState=function(){this.app.paused=!this.app.paused},t.prototype.initializeHUDScene=function(){var e,i=this;return this.hudScene=new o.Z58,this.initializeCamera(),this.HUDProcessorStats=new j(this.hudScene,this.statsPosition(),this.app.cpus),this.menu=new V(this.hudScene,this.hudCamera,(function(){return i.hideMenu()})),(e=this.buttons).push.apply(e,function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}([new W(this.hudScene,this.pauseButtonPosition(),t.BASE_COLOR,this.app.paused,(function(){return i.togglePauseState()}))],function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s}(this.menu.getButtons()),!1)),this.playerStats=new K(this.hudScene,this.playerStatsPosition()),this},t.prototype.reset=function(){this.HUDProcessorStats.clear(),this.buttons.forEach((function(t){return t.destroy()})),this.menu.destroy(),this.initializeHUDScene()},t.prototype.initializeCamera=function(){var t=window.innerWidth/window.innerHeight;this.hudCamera=new o.qUd(-t,t,1,-1,1,3),this.hudCamera.position.set(0,0,2)},t.prototype.showMenu=function(){this.selectedActor&&(this.menu.showMenu(this.selectedActor),this.eventHandler.chipMenuButtons=this.menu.getMenuButtons())},t.prototype.hideMenu=function(){var t;this.menu.hideMenu(),this.selectedActor=null===(t=this.selectedActor)||void 0===t?void 0:t.deselect(),this.eventHandler.chipMenuButtons=[]},t.prototype.statsPosition=function(){return new o.I9Y(this.hudCamera.left+.1,this.hudCamera.top-.3)},t.prototype.playerStatsPosition=function(){return new o.I9Y(this.hudCamera.right-.4,this.hudCamera.top-.12-(this.isMobileRatio()?.1:0))},t.prototype.pauseButtonPosition=function(){return new o.I9Y(this.hudCamera.right-.1,this.hudCamera.top-.1-(this.isMobileRatio()?.1:0))},t.prototype.isMobileRatio=function(){return window.innerWidth/window.innerHeight<.8},t.BASE_COLOR=new o.V9B({color:h.COLOR_PALETTE.get("MEDIUM_LIGHT")}),t.HOVER_COLOR=new o.V9B({color:h.COLOR_PALETTE.get("LIGHT")}),t.MENU_COLOR=new o.V9B({color:h.COLOR_PALETTE.get("MEDIUM_DARK")}),t.HOVER_SCALE_FACTOR=1.1,t.TEXT_SIZE=.05,t.ZOOM_FACTOR=1e-4,t.MAX_ZOOM=.2,t.MIN_ZOOM=1,t.MAX_CAMERA_POSITION_X=4,t.MAX_CAMERA_POSITION_Y=4,t.SCROLL_SPEED=2,t}(),Q=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),$=function(t){function e(e,i,n,r,s,a){void 0===s&&(s=J.TEXT_SIZE),void 0===a&&(a=!0);var u=t.call(this,e)||this;if(u.mesh=h.buildTextMesh(i,n.x,n.y,s,J.BASE_COLOR,a),u.mesh.geometry.computeBoundingBox(),null===u.mesh.geometry.boundingBox)throw new Error("Bounding box is null");return u.hitbox=h.buildQuadrilateralMesh(u.mesh.geometry.boundingBox.max.x-u.mesh.geometry.boundingBox.min.x,u.mesh.geometry.boundingBox.max.y-u.mesh.geometry.boundingBox.min.y,J.BASE_COLOR,new o.I9Y(n.x,n.y)),a||(u.mesh.geometry.computeBoundingBox(),u.hitbox.position.set(n.x+(u.mesh.geometry.boundingBox.max.x-u.mesh.geometry.boundingBox.min.x)/2+.01,n.y+(u.mesh.geometry.boundingBox.max.y-u.mesh.geometry.boundingBox.min.y)/2-.005,0)),u.hitbox.visible=!1,e.add(u.mesh,u.hitbox),u.onClick=function(){return r()},u.onHover=function(){return u.mesh.material=J.HOVER_COLOR},u.onUnhover=function(){return u.mesh.material=J.BASE_COLOR},u}return Q(e,t),e.prototype.getHitbox=function(){return this.hitbox},e.prototype.dispose=function(){this.scene.remove(this.mesh,this.hitbox)},e}(q),tt=function(){function t(){}return t.prototype.build=function(){return new $(this.scene,this.text,this.position,this.onClick,this.textSize,this.centered)},t.prototype.withScene=function(t){return this.scene=t,this},t.prototype.withText=function(t){return this.text=t,this},t.prototype.withPosition=function(t){return this.position=t,this},t.prototype.withOnClick=function(t){return this.onClick=t,this},t.prototype.withTextSize=function(t){return this.textSize=t,this},t.prototype.withCentered=function(t){return this.centered=t,this},t}(),et=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),it=function(t){function e(i,n,o,r){void 0===r&&(r=0);var s=t.call(this,i,n,o)||this;if(s.cacheSize=r,s.previousRetiredInstructionCounts=new f(50),s.retiredInstructionCount=0,s.accumulatedInstructionCount=0,s.IPC=0,s.IPS=0,s.highlightedTraces=[],s.safeIncrementClock=function(){return s.getClockFrequency()<p.MAX_CLOCK_FREQUENCY?s.updateClock(s.getClockFrequency()+1):s.getClockFrequency()},s.safeDecrementClock=function(){return s.getClockFrequency()>1&&(null==s.instructionMemory||s.getClockFrequency()>3*s.instructionMemory.getClockFrequency())&&(null==s.workingMemory||s.getClockFrequency()>3*s.workingMemory.getClockFrequency())?s.updateClock(s.getClockFrequency()-1):s.getClockFrequency()},r>0){var h=x.dimensions(),a=G.dimensions(r),u=h.height+a.height+2*e.CONTENTS_MARGIN+e.COMPONENT_SPACING;s.iCache=new G(s,0,-u/2+a.height/2+e.CONTENTS_MARGIN,r,h.width),s.core=new x(s,0,u/2-h.height/2-e.CONTENTS_MARGIN,s.iCache)}else s.core=new x(s,0,0);return s.initializeGraphics(),s}return et(e,t),e.prototype.connectToInstructionMemory=function(t){this.instructionMemory=t,this.iCache&&this.iCache.setInstructionMemory(t.getInstructionBuffer()),this.core.setInstructionMemory(t);var i=this.instructionMemory.size;this.drawPins(this.bodyMesh,n.RIGHT,i);var o=this.pinPositions.get(n.RIGHT)[0],r=i*e.TRACE_SPACING+2*e.TRACE_OFFSET+3*p.PIN_WIDTH,s=this.instructionMemory.dimensions();t.setPosition([o.x+r+s.width/2,o.y+s.height/2-p.PIN_MARGIN-p.PIN_WIDTH]),t.initializeGraphics(),this.drawTraces(n.RIGHT,this.instructionMemory,n.LEFT,e.TRACE_OFFSET,e.TRACE_SPACING,"y")},e.prototype.disconnectInstructionMemory=function(){var t=this;null!=this.instructionMemory&&(this.instructionMemory.disposeGraphics(),this.instructionMemory=void 0,this.core.setInstructionMemory(void 0),this.clearTracesAndPins(n.RIGHT),this.highlightedTraces.forEach((function(e){return t.scene.remove(e)})),this.core.flushPipeline(),this.iCache&&this.iCache.flush())},e.prototype.connectToWorkingMemory=function(t){this.workingMemory=t,this.core.setWorkingMemory(t);var i=t.numberOfBanks;this.drawPins(this.bodyMesh,n.TOP,i);var o=this.pinPositions.get(n.TOP)[i-1],r=i*e.TRACE_SPACING+2*e.TRACE_OFFSET+3*p.PIN_WIDTH,s=t.dimensions();t.setPosition([o.x-s.width/2+p.PIN_MARGIN+p.PIN_WIDTH,o.y+r+s.height/2]),t.initializeGraphics(),this.drawTraces(n.TOP,this.workingMemory,n.BOTTOM,e.TRACE_OFFSET,e.TRACE_SPACING,"x")},e.prototype.disconnectWorkingMemory=function(){var t=this;this.workingMemory&&(this.workingMemory.disposeGraphics(),this.workingMemory=void 0,this.core.setWorkingMemory(void 0),this.clearTracesAndPins(n.TOP),this.highlightedTraces.forEach((function(e){return t.scene.remove(e)})),this.core.flushPipeline(),this.iCache&&this.iCache.flush())},e.prototype.getMenuOptions=function(){if(!this.chipMenuOptions){this.disconnectInstructionMemory=this.disconnectInstructionMemory.bind(this);var t=(new tt).withText("[Disconnect]").withOnClick(this.disconnectInstructionMemory);this.disconnectWorkingMemory=this.disconnectWorkingMemory.bind(this);var e=(new tt).withText("[Disconnect]").withOnClick(this.disconnectWorkingMemory),i=[new z("Power Consumption",String(50),"W"),new z("Instruction Memory connected",this.instructionMemory?"True":"False",void 0,t),new z("Working Memory connected",this.workingMemory?"True":"False",void 0,e)],n=[U.createNumberSelection("Clock Frequency",0,"The clock frequency of the processor.",this.getClockFrequency(),this.safeIncrementClock,this.safeDecrementClock),U.createNumberSelection("Cache Size",0,"The size of the cache memory.",this.cacheSize,this.increaseCacheSize,this.decreaseCacheSize)];this.chipMenuOptions=new k(i,n)}return this.chipMenuOptions},e.prototype.notifyInstructionRetired=function(){this.retiredInstructionCount++},e.prototype.highlightMainMemoryTrace=function(t,i){var r=this;this.workingMemory&&(this.highlightedTraces.push((new o.YJl).add(new o.eaF(this.pinGeometries.get(n.TOP)[t],i),new o.eaF(this.workingMemory.pinGeometries.get(n.BOTTOM)[t],i),this.drawTrace(t,i,n.TOP,this.workingMemory,n.BOTTOM,e.TRACE_OFFSET,e.TRACE_SPACING,"x"))),this.highlightedTraces.forEach((function(t){return r.scene.add(t)})))},e.prototype.highlightInstructionMemoryTrace=function(t,i){var r=this;this.instructionMemory&&(this.highlightedTraces.push((new o.YJl).add(new o.eaF(this.pinGeometries.get(n.RIGHT)[t],i),new o.eaF(this.instructionMemory.pinGeometries.get(n.LEFT)[t],i),this.drawTrace(t,i,n.RIGHT,this.instructionMemory,n.LEFT,e.TRACE_OFFSET,e.TRACE_SPACING,"y"))),this.highlightedTraces.forEach((function(t){return r.scene.add(t)})))},e.prototype.clearHighlightedTraces=function(){var t=this;this.highlightedTraces.forEach((function(e){return t.scene.remove(e)})),this.highlightedTraces=[]},e.prototype.getIPC=function(){return this.IPC},e.prototype.getIPS=function(){return this.IPS},e.prototype.getAccRetiredInstructionsCount=function(){return this.accumulatedInstructionCount},e.prototype.displayName=function(){return"CPU"},e.prototype.update=function(){var t;this.core.update(),null===(t=this.iCache)||void 0===t||t.update(),this.updateRetiredInstructionCounters(),this.IPC=this.calculateAverageInstructionCount(),this.IPS=this.IPC*this.getClockFrequency()},e.prototype.initializeGraphics=function(){var t;this.core.initializeGraphics(),null===(t=this.iCache)||void 0===t||t.initializeGraphics();var i=this.core.width+2*e.CONTENTS_MARGIN,n=this.core.height+2*e.CONTENTS_MARGIN;this.iCache&&(i=Math.max(i,this.iCache.width),n+=this.iCache.height+e.COMPONENT_SPACING),this.buildBodyMesh(i,n)},e.prototype.updateRetiredInstructionCounters=function(){this.previousRetiredInstructionCounts.isFull()&&this.previousRetiredInstructionCounts.dequeue(),this.previousRetiredInstructionCounts.enqueue(this.retiredInstructionCount),this.accumulatedInstructionCount+=this.retiredInstructionCount,this.retiredInstructionCount=0},e.prototype.calculateAverageInstructionCount=function(){var t=0,e=this.previousRetiredInstructionCounts.size();if(0===e)return 0;for(var i=0;i<e;++i)t+=this.previousRetiredInstructionCounts.get(i);return t/e},e.prototype.increaseCacheSize=function(){return this.cacheSize},e.prototype.decreaseCacheSize=function(){return this.cacheSize},e.TRACE_OFFSET=.1,e.TRACE_SPACING=.03,e.COMPONENT_SPACING=.05,e}(p),nt=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),ot=function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s},rt=function(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],n=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")},st=function(t){function e(){var e=t.apply(this,function(t,e,i){if(i||2===arguments.length)for(var n,o=0,r=e.length;o<r;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}([],ot(arguments),!1))||this;return e.addressMeshes=[],e.iterateMode=!1,e.requestedInstructionAddress=-1,e.jumpInstructions=new Map,e.highlightedJumpPCs=[],e.flaggedBuffers=[],e.flaggedBufferMeshes=[],e}return nt(e,t),e.prototype.highestInstructionAddress=function(){return this.addressReached-this.storedInstructions.maxSize+this.storedInstructions.size()},e.prototype.setJumpInstruction=function(t,e){this.jumpInstructions.set(t,e)},e.prototype.askForInstructionsAt=function(t,e,i){if(0==this.delay)throw new Error("There is no need to ask for instructions when there is no delay");this.connectedChip=t;var n=this.toLocalAddress(i);if(i==this.requestedInstructionAddress&&this.readTimeout>0)return[-1,null];if(!this.storedInstructions.get(n))return[-1,null];this.requestedInstructionAddress=i;for(var o=n;o<n+e;++o)this.storedInstructions.get(o)&&this.highlightBuffer(o);return this.readTimeout=this.delay,[n,this.instructionMaterial(this.storedInstructions.get(n))]},e.prototype.fetchInstructionAt=function(t){if(0!=this.delay&&!this.isReadyToBeRead())throw new Error("Instruction buffer from ".concat(this.parent.displayName()," is not ready to be read"));var e=this.toLocalAddress(t),i=this.storedInstructions.get(e);if(i)return this.clearHighlights(),this.updateJumpInstructionGraphics(),this.iterateMode||(this.storedInstructions.remove(e),this.shiftMeshesDown(1)),this.lowestAddressIsJumpTarget(t)||(!this.iterateMode&&e>0?this.handleForwardBranch(t):this.clearJumpInstruction()),this.readyToBeRead=!1,this.requestedInstructionAddress=-1,i},e.prototype.handleForwardBranch=function(t){for(var e=this.toLocalAddress(t)+1,i=0;i<e;++i)this.storedInstructions.dequeue();this.shiftMeshesDown(e)},e.prototype.clearJumpInstruction=function(){if(this.iterateMode){this.iterateMode=!1;for(var t=this.firstInstructionTargetingLowestAddress(),e=this.toLocalAddress(t)+1,i=0;i<e;++i)this.storedInstructions.dequeue();this.shiftMeshesDown(e)}},e.prototype.write=function(e,i){void 0===i&&(i=e.size()),t.prototype.write.call(this,e,i)},e.prototype.initializeGraphics=function(){if(this.horizontal)throw new Error("Horizontal instruction buffers are not supported for AddressedInstructionBuffer");t.prototype.initializeGraphics.call(this);for(var e=0;e<this.size;e++){var i=h.buildTextMesh(h.toHex(e),this.position.x-this.width/2-.6*ct.ADDRESS_MARGIN,this.bufferMeshOffsets[e],.8*m.TEXT_SIZE,m.TEXT_MATERIAL,!0);this.addressMeshes[e]=i,this.scene.add(i)}this.addressReached=this.size},e.prototype.shiftMeshesDown=function(e){var i=this;t.prototype.shiftMeshesDown.call(this,e),this.addressMeshes.splice(0,e).forEach((function(t){i.scene.remove(t),t.geometry.dispose()})),this.addressMeshes.forEach((function(t,n){return t.translateY(i.bufferMeshOffsets[n]-i.bufferMeshOffsets[n+e])})),this.flaggedBuffers=this.flaggedBuffers.map((function(t){return t-e})),this.flaggedBufferMeshes.forEach((function(t,e){if(null!==t){var n=i.flaggedBuffers[e];n>=0?t.position.y=i.bufferMeshOffsets[n]:(i.scene.remove(t),t.geometry.dispose(),i.flaggedBufferMeshes[e]=null)}})),this.flaggedBuffers=this.flaggedBuffers.filter((function(t){return t>=0})),this.flaggedBufferMeshes=this.flaggedBufferMeshes.filter((function(t){return null!==t}));for(var n=this.size-e;n<this.size;++n){var o=h.buildTextMesh(h.toHex(this.addressReached++),this.position.x-this.width/2-.6*ct.ADDRESS_MARGIN,this.bufferMeshOffsets[n],.8*m.TEXT_SIZE,m.TEXT_MATERIAL,!0);this.addressMeshes[n]=o,this.scene.add(o)}},e.prototype.dispose=function(){var e=this;t.prototype.dispose.call(this);for(var i=0;i<this.addressMeshes.length;i++){var n=this.addressMeshes[i];this.scene.remove(n),n.geometry.dispose()}this.addressMeshes=[],this.jumpInstructions.clear(),this.highlightedJumpPCs=[],this.flaggedBuffers=[],this.flaggedBufferMeshes.forEach((function(t){null!==t&&(e.scene.remove(t),t.geometry.dispose())}))},e.prototype.highlightFlaggedBuffer=function(t){this.clearHighlights();var e=new o.V9B({color:m.BRANCH_MATERIAL.color,transparent:!0,opacity:.1}),i=new o.eaF(this.bufferHighlightGeometry,e);i.position.set(this.horizontal?this.bufferMeshOffsets[t]:this.position.x,this.horizontal?this.position.y:this.bufferMeshOffsets[t],.01),this.flaggedBufferMeshes.push(i),this.flaggedBuffers.push(t),this.scene.add(i)},e.prototype.highlightJumpAddress=function(t){this.addressMeshes[t].material=m.BRANCH_MATERIAL},e.prototype.toLocalAddress=function(t){return this.size-this.addressReached+t},e.prototype.updateJumpInstructionGraphics=function(){var t=this;this.jumpInstructions.forEach((function(e,i){var n=t.toLocalAddress(i),o=t.toLocalAddress(e.getAddress());!t.highlightedJumpPCs.includes(i)&&t.isAddressInRange(n)&&t.isAddressInRange(o)&&(t.highlightedJumpPCs.push(i),t.highlightJumpAddress(o),t.highlightIntermediateAddresses(o,n))}))},e.prototype.isAddressInRange=function(t){return t<this.addressMeshes.length&&t>=0&&t<this.storedInstructions.size()},e.prototype.highlightIntermediateAddresses=function(t,e){for(var i=Math.min(t,e),n=Math.max(t,e),o=i;o<=n;++o)this.isAddressInRange(o)&&!this.flaggedBuffers.includes(o)&&this.highlightFlaggedBuffer(o)},e.prototype.lowestAddressIsJumpTarget=function(t){var e,i,n=this.addressReached-this.storedInstructions.maxSize;try{for(var o=rt(this.jumpInstructions),r=o.next();!r.done;r=o.next()){var s=ot(r.value,2),h=s[0],a=s[1];if(t<=h&&a.getAddress()===n)return this.iterateMode=!0,!0}}catch(t){e={error:t}}finally{try{r&&!r.done&&(i=o.return)&&i.call(o)}finally{if(e)throw e.error}}return!1},e.prototype.firstInstructionTargetingLowestAddress=function(){var t,e,i=this.addressReached-this.storedInstructions.maxSize;try{for(var n=rt(this.jumpInstructions),o=n.next();!o.done;o=n.next()){var r=ot(o.value,2),s=r[0];if(r[1].getAddress()===i)return s}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}throw new Error("No instruction targets the lowest address in the instruction buffer")},e.prototype.askForInstructions=function(t,e){throw new Error("Method not implemented for AddressedInstructionBuffer, use askForInstructionsAt instead")},e}(I);!function(t){t.ALU="ALU",t.ALU_IMM="ALU_IMM",t.MEMORY="MEMORY",t.BRANCH="BRANCH"}(D||(D={}));var ht=function(){function t(t,e,i,n,o,r){if(this.opcode=t,_.MEMORY_OPCODES.includes(t))this.validateMemoryOperation(e,i,n,o),this.type=D.MEMORY,this.resultReg=e,this.address=o;else if(_.ALU_OPCODES.includes(t))this.validateAluOperation(e,i,n,o),this.type=D.ALU,this.op1Reg=i,this.op2Reg=n,this.resultReg=e;else if(_.ALU_IMM_OPCODES.includes(t))this.validateAluImmOperation(e,i,n,o,r),this.type=D.ALU_IMM,this.resultReg=e,this.op1Reg=i,this.immediate=r;else{if(!_.BRANCH_OPCODES.includes(t))throw new Error("Invalid opcode: ".concat(t));this.validateBranchOperation(e,i,n,o),this.type=D.BRANCH,this.op1Reg=i,this.op2Reg=n,this.address=o}}return t.memory=function(e,i,n){return new t(e,i,void 0,void 0,n)},t.alu=function(e,i,n,o){return new t(e,i,n,o)},t.branch=function(e,i,n,o){return new t(e,void 0,i,n,o)},t.aluImm=function(e,i,n,o){return new t(e,i,n,void 0,void 0,o)},t.prototype.isMemoryOperation=function(){return this.type===D.MEMORY},t.prototype.isArithmetic=function(){return this.type===D.ALU||this.type===D.ALU_IMM},t.prototype.isImmediate=function(){return this.type===D.ALU_IMM},t.prototype.isBranch=function(){return this.type===D.BRANCH},t.prototype.toString=function(){switch(this.type){case D.MEMORY:return"".concat(this.opcode," R").concat(this.resultReg,", [").concat(h.toHex(this.address),"]");case D.ALU:return"".concat(this.opcode," R").concat(this.resultReg,", R").concat(this.op1Reg,", R").concat(this.op2Reg);case D.BRANCH:return"".concat(this.opcode," R").concat(this.op1Reg,", R").concat(this.op2Reg,", ").concat(h.toHex(this.address));case D.ALU_IMM:return"".concat(this.opcode," R").concat(this.resultReg,", R").concat(this.op1Reg,", ").concat(this.immediate);default:throw new Error("Invalid instruction type")}},t.prototype.getOpcode=function(){return this.opcode},t.prototype.getOp1Reg=function(){return this.type!==D.MEMORY?this.op1Reg:void 0},t.prototype.getOp2Reg=function(){return this.type!==D.MEMORY?this.op2Reg:void 0},t.prototype.getImmediate=function(){return this.type===D.ALU_IMM?this.immediate:void 0},t.prototype.getResultReg=function(){return this.resultReg},t.prototype.getAddress=function(){return this.type!==D.ALU?this.address:void 0},t.prototype.validateMemoryOperation=function(t,e,i,n,o){if(void 0===n)throw new Error("Missing memory address for MEMORY operation");if(void 0===t)throw new Error("Missing result register for MEMORY operation");if(void 0!==e||void 0!==i)throw new Error("Cannot have operand registers for MEMORY operation");if(void 0!==o)throw new Error("Cannot have immediate value for MEMORY operation")},t.prototype.validateAluOperation=function(t,e,i,n,o){if(void 0===e||void 0===i)throw new Error("Missing operand register for ALU operation");if(void 0===t)throw new Error("Missing result register for ALU operation");if(void 0!==n)throw new Error("Cannot have address for ALU operation");if(void 0!==o)throw new Error("Cannot have immediate value for ALU operation")},t.prototype.validateBranchOperation=function(t,e,i,n,o){if(void 0===e||void 0===i||void 0===n)throw new Error("Missing parameters for BRANCH operation");if(void 0!==t)throw new Error("Cannot have result register for BRANCH operation");if(void 0!==o)throw new Error("Cannot have immediate value for BRANCH operation")},t.prototype.validateAluImmOperation=function(t,e,i,n,o){if(void 0===e||void 0===o)throw new Error("Missing operand register or immediate value for ALU_IMM operation");if(void 0===t)throw new Error("Missing result register for ALU_IMM operation");if(void 0!==i||void 0!==n)throw new Error("Cannot have second operand register or address for ALU_IMM operation")},t}(),at=function(){function t(t,e,i){this.size=t,this.instructionBuffer=e,this.workingMemorySize=i,this.forLoopProbability=.3,this.branchProbability=.2,this.doubleForLoopProbability=.1,this.initializeRegistersProbability=.3,this.instructionStream=new f}return t.prototype.getInstructionStream=function(){return this.instructionStream},t.prototype.updateInstructionStream=function(){if(this.instructionStream.isEmpty())for(var e=0;this.instructionStream.size()<2*this.size;){if(Math.random()<this.doubleForLoopProbability){var i=t.MIN_DOUBLED_LOOP_SIZE+Math.floor(Math.random()*(t.MAX_DOUBLED_LOOP_SIZE-t.MIN_DOUBLED_LOOP_SIZE));this.doubleForLoop(e,i).moveTo(this.instructionStream),e+=i}if(Math.random()<this.forLoopProbability){if(Math.random()<this.initializeRegistersProbability){var n=_.REGISTER_COUNT-1;this.initializeRegistersWorkload(n).moveTo(this.instructionStream),e+=n}i=t.MIN_LOOP_SIZE+Math.floor(Math.random()*(t.MAX_LOOP_SIZE-t.MIN_LOOP_SIZE)),this.typicalForLoop(e,i).moveTo(this.instructionStream),e+=i}else Math.random()<this.branchProbability?(i=t.MIN_BRANCH_SIZE+Math.floor(Math.random()*(t.MAX_BRANCH_SIZE-t.MIN_BRANCH_SIZE)),this.conditionalBranchWorkload(e,i).moveTo(this.instructionStream),e+=i):(i=t.MIN_SEQUENCE_SIZE+Math.floor(Math.random()*(t.MAX_SEQUENCE_SIZE-t.MIN_SEQUENCE_SIZE)),this.typicalInstructionSequence(i).moveTo(this.instructionStream),e+=i)}},t.prototype.typicalInstructionSequence=function(t,e){var i=new f(t),n=this.loadConsecutiveAddresses(i,t,e),o=function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,o,r=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=r.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(i=r.return)&&i.call(r)}finally{if(o)throw o.error}}return s}(this.computeOnGivenRegisters(i,t,n,e),2),r=o[0],s=o[1];return this.storeResults(i,t-n.length-s,r),i},t.prototype.loadConsecutiveAddresses=function(t,e,i){for(var n=this.getRandom(Math.floor(.6*e),2),o=this.randomConsecutiveRegs(n,i),r=this.randomConsecutiveAddresses(n),s=0;s<n;++s)t.enqueue(ht.memory("LOAD",o[s],r[s]));return o},t.prototype.computeOnGivenRegisters=function(t,e,i,n){for(var o=this.getRandom(Math.floor(.5*e),1),r=new Set,s=0;s<o;++s){var h=this.randomReg(n);r.add(h),t.enqueue(ht.alu(this.randomFrom(_.ALU_OPCODES),h,this.randomFrom(i),this.randomFrom(i)))}return[r,o]},t.prototype.storeResults=function(t,e,i){for(var n=0;n<e;++n){var o=this.randomFromSet(i);t.enqueue(ht.memory("STORE",o,this.getRandom(this.workingMemorySize))),i.size>1&&i.delete(o)}},t.prototype.typicalForLoop=function(e,i){var n=new f(i),o=this.randomReg(),r=this.randomReg([o]);n.enqueue(ht.aluImm("ADDI",o,o,0));var s=i-3;if(s>t.MIN_SEQUENCE_SIZE)this.typicalInstructionSequence(s,[o,r]).moveTo(n);else for(var h=0;h<s;++h)n.enqueue(ht.alu(this.randomFrom(_.ALU_OPCODES),this.randomReg([o,r]),this.randomReg(),this.randomReg()));n.enqueue(ht.aluImm("ADDI",o,o,1));var a=this.instructionBuffer.highestInstructionAddress()+e+1,u=ht.branch(this.randomFrom(_.BRANCH_OPCODES),o,r,a);return n.enqueue(u),this.instructionBuffer.setJumpInstruction(a+i-2,u),n},t.prototype.conditionalBranchWorkload=function(e,i){var n=new f(i),o=this.randomReg(),r=this.instructionBuffer.highestInstructionAddress()+e+i-1,s=ht.branch(this.randomFrom(_.BRANCH_OPCODES),o,this.randomReg([o]),r);n.enqueue(s);var h=i-1;if(h>t.MIN_SEQUENCE_SIZE)this.typicalInstructionSequence(h).moveTo(n);else for(var a=0;a<h;++a)n.enqueue(ht.alu(this.randomFrom(_.ALU_OPCODES),this.randomReg(),this.randomReg(),this.randomReg()));return this.instructionBuffer.setJumpInstruction(this.instructionBuffer.highestInstructionAddress()+e,s),n},t.prototype.doubleForLoop=function(t,e){var i=new f(e),n=this.randomReg(),o=this.randomReg([n]),r=this.randomReg([n,o]),s=this.randomReg([n,o,r]);i.enqueue(ht.aluImm("ADDI",r,r,0)),i.enqueue(ht.aluImm("ADDI",n,n,0));for(var h=e-6,a=this.instructionBuffer.highestInstructionAddress()+t+1,u=a+1,c=0;c<h;++c)i.enqueue(ht.alu(this.randomFrom(_.ALU_OPCODES),this.randomReg([n,r]),this.randomReg(),this.randomReg()));i.enqueue(ht.aluImm("ADDI",n,n,1));var p=ht.branch(this.randomFrom(_.BRANCH_OPCODES),n,o,u);i.enqueue(p),this.instructionBuffer.setJumpInstruction(u+h+1,p),i.enqueue(ht.aluImm("ADDI",r,r,1));var d=ht.branch(this.randomFrom(_.BRANCH_OPCODES),r,s,a);return i.enqueue(d),this.instructionBuffer.setJumpInstruction(a+h+4,d),i},t.prototype.initializeRegistersWorkload=function(t){for(var e=new f(t),i=this.randomConsecutiveRegs(t),n=0;n<t;++n)e.enqueue(ht.aluImm("ADDI",i[n],0,this.getRandom(_.MAX_BYTE_VALUE,1)));return e},t.prototype.randomFrom=function(t){return t[Math.floor(Math.random()*t.length)]},t.prototype.randomFromSet=function(t){var e,i,n=Math.floor(Math.random()*t.size),o=0;try{for(var r=function(t){var e="function"==typeof Symbol&&Symbol.iterator,i=e&&t[e],n=0;if(i)return i.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),s=r.next();!s.done;s=r.next()){var h=s.value;if(o===n)return h;++o}}catch(t){e={error:t}}finally{try{s&&!s.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}return t.values().next().value},t.prototype.randomReg=function(t){var e,i=0;do{if(i++>=100)throw new Error("Max attempts reached in randomReg");e=this.getRandom(_.REGISTER_COUNT,1)}while(t&&t.includes(e));return e},t.prototype.randomConsecutiveRegs=function(t,e){for(var i=this.randomReg(e),n=[],o=0;o<t;)e&&e.includes(i)||(n.push(i),o++),i=(i+1)%_.REGISTER_COUNT;return n},t.prototype.randomConsecutiveAddresses=function(t){for(var e=this.getRandom(this.workingMemorySize),i=[],n=0;n<t;++n)i.push((e+n)%this.workingMemorySize);return i},t.prototype.getRandom=function(t,e){return void 0===e&&(e=0),e+Math.floor(Math.random()*(t-e))},t.MIN_DOUBLED_LOOP_SIZE=7,t.MAX_DOUBLED_LOOP_SIZE=9,t.MIN_LOOP_SIZE=4,t.MAX_LOOP_SIZE=6,t.MIN_BRANCH_SIZE=4,t.MAX_BRANCH_SIZE=8,t.MIN_SEQUENCE_SIZE=4,t.MAX_SEQUENCE_SIZE=7,t}(),ut=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),ct=function(t){function e(i,n,o,r,s){void 0===s&&(s=16);var h=t.call(this,[0,0],i.scene,n)||this;return h.app=i,h.size=s,h.instructionBuffer=new st(h,s,.6*e.ADDRESS_MARGIN+e.INNER_SPACING-e.CONTENTS_MARGIN,0,o),h.CodeGen=new at(s,h.instructionBuffer,r),h}return ut(e,t),e.prototype.getInstructionBuffer=function(){return this.instructionBuffer},e.prototype.dimensions=function(){return{width:this.instructionBuffer.width+2*e.CONTENTS_MARGIN,height:this.instructionBuffer.height+2*e.CONTENTS_MARGIN}},e.prototype.setPosition=function(t){this.position={x:t[0],y:t[1]},this.instructionBuffer.setPosition([t[0]+.6*e.ADDRESS_MARGIN+e.INNER_SPACING-e.CONTENTS_MARGIN,t[1]])},e.prototype.getMenuOptions=function(){var t=this;if(!this.chipMenuOptions){var e=[U.createNumberSelection("Clock Frequency",0,"The clock frequency of the chip.",this.getClockFrequency(),(function(){return t.safeIncrementClock()}),(function(){return t.safeDecrementClock()}))];this.chipMenuOptions=new k([],e)}return this.chipMenuOptions},e.prototype.displayName=function(){return"Instruction Memory"},e.prototype.update=function(){this.instructionBuffer.update(),this.CodeGen.updateInstructionStream(),Math.random()<.2&&this.instructionBuffer.write(this.CodeGen.getInstructionStream(),1)},e.prototype.initializeGraphics=function(){var t=this.instructionBuffer.height+2*e.CONTENTS_MARGIN,i=this.instructionBuffer.width+2*e.CONTENTS_MARGIN+e.ADDRESS_MARGIN;this.buildBodyMesh(i,t),this.drawPins(this.bodyMesh,n.LEFT,this.size),this.instructionBuffer.initializeGraphics()},e.prototype.disposeGraphics=function(){t.prototype.disposeBodyMesh.call(this),this.clearTracesAndPins(n.LEFT),this.instructionBuffer.dispose(),this.app.removeGameActor(this)},e.prototype.safeIncrementClock=function(){return this.instructionBuffer.connectedChip&&this.getClockFrequency()<this.instructionBuffer.connectedChip.getClockFrequency()/3?this.updateClock(this.getClockFrequency()+1):this.getClockFrequency()},e.prototype.safeDecrementClock=function(){return this.getClockFrequency()>1?this.updateClock(this.getClockFrequency()-1):this.getClockFrequency()},e.ADDRESS_MARGIN=.2,e}(p),pt=function(){var t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)};return function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),dt=function(t){function e(e,i,n,o){void 0===n&&(n=2),void 0===o&&(o=4);var r=t.call(this,[0,0],e.scene,i)||this;return r.app=e,r.dataBanks=[],r.numberOfWords=o,r.numberOfBanks=n,r.size=n*o,r}return pt(e,t),e.prototype.dimensions=function(){var t=R.dimensions(this.numberOfWords);return{width:t.width*this.numberOfBanks+e.BANK_SPACING*(this.numberOfBanks-1)+2*e.CONTENTS_MARGIN,height:t.height+2*e.CONTENTS_MARGIN+e.INNER_SPACING+e.TEXT_SIZE}},e.prototype.setPosition=function(t){this.position={x:t[0],y:t[1]}},e.prototype.isReady=function(t){return this.bankOf(t).isReady()},e.prototype.askForMemoryOperation=function(t,e){this.connectedChip=t,this.bankOf(e).askForMemoryOperation(t,e%this.bankOf(e).getSize())},e.prototype.read=function(t){return this.bankOf(t).read(t%this.bankOf(t).getSize())},e.prototype.write=function(t,e){this.bankOf(t).write(t%this.bankOf(t).getSize(),e)},e.prototype.getMenuOptions=function(){var t=this;if(!this.chipMenuOptions){var e=[U.createNumberSelection("Clock Frequency",0,"The clock frequency of the chip.",this.getClockFrequency(),(function(){return t.safeIncrementClock()}),(function(){return t.safeDecrementClock()}))];this.chipMenuOptions=new k([],e)}return this.chipMenuOptions},e.prototype.displayName=function(){return"Main Memory"},e.prototype.update=function(){this.dataBanks.forEach((function(t){return t.update()}))},e.prototype.initializeGraphics=function(){for(var t=R.dimensions(this.numberOfWords),i=t.height+2*e.CONTENTS_MARGIN+e.INNER_SPACING+e.TEXT_SIZE,o=t.width*this.numberOfBanks+2*e.CONTENTS_MARGIN+(this.numberOfBanks-1)*e.BANK_SPACING,r=-o/2+t.width/2+e.CONTENTS_MARGIN,s=this.numberOfWords,a=0;a<this.numberOfBanks;a++){for(var u=[],c=0;c<s;c++)u.push(h.toHex(a*s+c));var p=new R(this,r+a*(t.width+e.BANK_SPACING),(-e.INNER_SPACING-e.TEXT_SIZE)/2,this.numberOfWords,e.DELAY,void 0,u,"DB".concat(a));p.initializeGraphics(),this.dataBanks[a]=p}this.buildBodyMesh(o,i),this.drawPins(this.bodyMesh,n.BOTTOM,this.numberOfBanks)},e.prototype.disposeGraphics=function(){t.prototype.disposeBodyMesh.call(this),this.clearTracesAndPins(n.BOTTOM),this.dataBanks.forEach((function(t){return t.dispose()})),this.app.removeGameActor(this)},e.prototype.bankOf=function(t){return this.dataBanks[Math.floor(t/this.numberOfWords)]},e.prototype.safeIncrementClock=function(){return this.connectedChip&&this.getClockFrequency()<this.connectedChip.getClockFrequency()/3?this.updateClock(this.getClockFrequency()+1):this.getClockFrequency()},e.prototype.safeDecrementClock=function(){return this.getClockFrequency()>1?this.updateClock(this.getClockFrequency()-1):this.getClockFrequency()},e.BANK_SPACING=.04,e.DELAY=10,e}(p);new(function(){function t(){var t=this;this.scene=new o.Z58,this.paused=!1,this.cpus=[],this.gameActors=[],this.loadResources().then((function(){t.renderer=t.setupRenderer(),t.setupCamera(),t.loadGame(),t.animate(),t.startGameLoop()}))}return t.prototype.loadResources=function(){return t=this,e=void 0,n=function(){return function(t,e){var i,n,o,r={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},s=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return s.next=h(0),s.throw=h(1),s.return=h(2),"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function h(h){return function(a){return function(h){if(i)throw new TypeError("Generator is already executing.");for(;s&&(s=0,h[0]&&(r=0)),r;)try{if(i=1,n&&(o=2&h[0]?n.return:h[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,h[1])).done)return o;switch(n=0,o&&(h=[2&h[0],o.value]),h[0]){case 0:case 1:o=h;break;case 4:return r.label++,{value:h[1],done:!1};case 5:r.label++,n=h[1],h=[0];continue;case 7:h=r.ops.pop(),r.trys.pop();continue;default:if(!((o=(o=r.trys).length>0&&o[o.length-1])||6!==h[0]&&2!==h[0])){r=0;continue}if(3===h[0]&&(!o||h[1]>o[0]&&h[1]<o[3])){r.label=h[1];break}if(6===h[0]&&r.label<o[1]){r.label=o[1],o=h;break}if(o&&r.label<o[2]){r.label=o[2],r.ops.push(h);break}o[2]&&r.ops.pop(),r.trys.pop();continue}h=e.call(t,r)}catch(t){h=[6,t],n=0}finally{i=o=0}if(5&h[0])throw h[1];return{value:h[0]?h[1]:void 0,done:!0}}([h,a])}}}(this,(function(t){switch(t.label){case 0:return[4,h.loadFont()];case 1:return t.sent(),[2]}}))},new((i=void 0)||(i=Promise))((function(o,r){function s(t){try{a(n.next(t))}catch(t){r(t)}}function h(t){try{a(n.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?o(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(s,h)}a((n=n.apply(t,e||[])).next())}));var t,e,i,n},t.prototype.setupRenderer=function(){return this.renderer=new o.JeP({antialias:!0,alpha:!0}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setClearColor(h.COLOR_PALETTE.get("DARKEST"),1),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.autoClear=!1,document.body.appendChild(this.renderer.domElement),this.renderer},t.prototype.setupCamera=function(){var t=window.innerWidth/window.innerHeight;this.camera=new o.qUd(-t,t,1,-1,1,3),this.camera.position.set(0,.8,2),this.camera.zoom=.4,this.camera.updateProjectionMatrix()},t.prototype.animate=function(){var t=this;requestAnimationFrame((function(){return t.animate()})),this.renderer.clear(),this.renderer.render(this.scene,this.camera),this.renderer.clearDepth(),this.renderer.render(this.hud.getHUDScene(),this.hud.getHUDCamera())},t.prototype.startGameLoop=function(){var e=this;setInterval((function(){e.paused||(e.gameActors.forEach((function(e){var i=Math.round(t.FPS/e.getClockFrequency());t.frameCount%i==0&&e.update()})),e.hud.update(),t.frameCount++)}),t.ONE_SECOND/t.FPS)},t.prototype.loadGame=function(){if(this.addGameActors(),0===this.cpus.length)throw new Error("No CPUs found in the simulation.");this.hud=new J(this),h.drawGrid(this.scene)},t.prototype.addGameActors=function(){var e=new dt(this,t.MEMORY_CLOCK_FREQUENCY,t.MEMORY_BANKS,t.MEMORY_WORDS_PER_BANK),i=t.MEMORY_BANKS*t.MEMORY_WORDS_PER_BANK,n=new ct(this,t.INSTRUCTION_MEMORY_CLOCK_FREQUENCY,t.INSTRUCTION_MEMORY_DELAY,i,t.INSTRUCTION_MEMORY_SIZE),o=new it(t.CPU_POSITION,this.scene,t.CPU_CLOCK_FREQUENCY,t.CPU_CACHE_SIZE);o.connectToInstructionMemory(n),o.connectToWorkingMemory(e),this.cpus.push(o),this.gameActors.push(o,n,e)},t.prototype.removeGameActor=function(t){var e=this.gameActors.indexOf(t);e>-1&&this.gameActors.splice(e,1)},t.ONE_SECOND=1e3,t.FPS=60,t.frameCount=0,t.CPU_POSITION=[0,0],t.CPU_CLOCK_FREQUENCY=30,t.CPU_CACHE_SIZE=6,t.INSTRUCTION_MEMORY_CLOCK_FREQUENCY=5,t.INSTRUCTION_MEMORY_DELAY=3,t.INSTRUCTION_MEMORY_SIZE=32,t.MEMORY_CLOCK_FREQUENCY=5,t.MEMORY_BANKS=12,t.MEMORY_WORDS_PER_BANK=16,t}())}},i={};function n(t){var o=i[t];if(void 0!==o)return o.exports;var r=i[t]={exports:{}};return e[t](r,r.exports,n),r.exports}n.m=e,t=[],n.O=(e,i,o,r)=>{if(!i){var s=1/0;for(c=0;c<t.length;c++){for(var[i,o,r]=t[c],h=!0,a=0;a<i.length;a++)(!1&r||s>=r)&&Object.keys(n.O).every((t=>n.O[t](i[a])))?i.splice(a--,1):(h=!1,r<s&&(s=r));if(h){t.splice(c--,1);var u=o();void 0!==u&&(e=u)}}return e}r=r||0;for(var c=t.length;c>0&&t[c-1][2]>r;c--)t[c]=t[c-1];t[c]=[i,o,r]},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t={792:0};n.O.j=e=>0===t[e];var e=(e,i)=>{var o,r,[s,h,a]=i,u=0;if(s.some((e=>0!==t[e]))){for(o in h)n.o(h,o)&&(n.m[o]=h[o]);if(a)var c=a(n)}for(e&&e(i);u<s.length;u++)r=s[u],n.o(t,r)&&t[r]&&t[r][0](),t[r]=0;return n.O(c)},i=self.webpackChunkminicpu=self.webpackChunkminicpu||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})();var o=n.O(void 0,[387],(()=>n(969)));o=n.O(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,